ADD	Astro8-Emulator/main.cpp	/^	ADD,$/;"	e	enum:AllInstructions	file:
AIN	Astro8-Emulator/main.cpp	/^	AIN = 1,$/;"	e	enum:AllInstructions	file:
ALUInstruction	Astro8-Emulator/main.cpp	/^enum ALUInstruction : MicroInstruction {$/;"	g	typeref:typename:MicroInstruction	file:
ALU_AND	Astro8-Emulator/main.cpp	/^	ALU_AND = 0b0000000000000110,$/;"	e	enum:ALUInstruction	file:
ALU_DI	Astro8-Emulator/main.cpp	/^	ALU_DI = 0b0000000000000011,$/;"	e	enum:ALUInstruction	file:
ALU_MASK	Astro8-Emulator/main.cpp	/^	ALU_MASK = 0b0000000000001111,$/;"	e	enum:ALUInstruction	file:
ALU_MU	Astro8-Emulator/main.cpp	/^	ALU_MU = 0b0000000000000010,$/;"	e	enum:ALUInstruction	file:
ALU_NOT	Astro8-Emulator/main.cpp	/^	ALU_NOT = 0b0000000000001000,$/;"	e	enum:ALUInstruction	file:
ALU_OR	Astro8-Emulator/main.cpp	/^	ALU_OR = 0b0000000000000111,$/;"	e	enum:ALUInstruction	file:
ALU_SL	Astro8-Emulator/main.cpp	/^	ALU_SL = 0b0000000000000100,$/;"	e	enum:ALUInstruction	file:
ALU_SR	Astro8-Emulator/main.cpp	/^	ALU_SR = 0b0000000000000101,$/;"	e	enum:ALUInstruction	file:
ALU_SU	Astro8-Emulator/main.cpp	/^	ALU_SU = 0b0000000000000001,$/;"	e	enum:ALUInstruction	file:
AND	Astro8-Emulator/main.cpp	/^	AND,$/;"	e	enum:AllInstructions	file:
AReg	Astro8-Emulator/main.cpp	/^uint16_t AReg = 0;$/;"	v	typeref:typename:uint16_t
AS_VARIABLE_OFFSET	Astro8-Emulator/main.cpp	/^#define AS_VARIABLE_OFFSET /;"	d	file:
ActualLineNumFromNum	Astro8-Emulator/main.cpp	/^int ActualLineNumFromNum(int x)$/;"	f	typeref:typename:int
AllInstructions	Astro8-Emulator/main.cpp	/^enum AllInstructions : FullInstruction {$/;"	g	typeref:typename:FullInstruction	file:
BIN	Astro8-Emulator/main.cpp	/^	BIN,$/;"	e	enum:AllInstructions	file:
BNK	Astro8-Emulator/main.cpp	/^	BNK,$/;"	e	enum:AllInstructions	file:
BNKC	Astro8-Emulator/main.cpp	/^	BNKC,$/;"	e	enum:AllInstructions	file:
BReg	Astro8-Emulator/main.cpp	/^uint16_t BReg = 0;$/;"	v	typeref:typename:uint16_t
BSL	Astro8-Emulator/main.cpp	/^	BSL,$/;"	e	enum:AllInstructions	file:
BSR	Astro8-Emulator/main.cpp	/^	BSR,$/;"	e	enum:AllInstructions	file:
BankReg	Astro8-Emulator/main.cpp	/^uint8_t BankReg = 0;$/;"	v	typeref:typename:uint8_t
BinToDec	Astro8-Emulator/main.cpp	/^int BinToDec(const string& input)$/;"	f	typeref:typename:int
BinToHexFilled	Astro8-Emulator/main.cpp	/^string BinToHexFilled(const string& input, int desiredSize)$/;"	f	typeref:typename:string
BitRange	Astro8-Emulator/main.cpp	/^unsigned BitRange(unsigned value, unsigned offset, unsigned n)$/;"	f	typeref:typename:unsigned
CIN	Astro8-Emulator/main.cpp	/^	CIN,$/;"	e	enum:AllInstructions	file:
CReg	Astro8-Emulator/main.cpp	/^uint16_t CReg = 0;$/;"	v	typeref:typename:uint16_t
CompareValues	Astro8-Emulator/main.cpp	/^void CompareValues(const string& valA, const string& comparer, const string& valB, const vector</;"	f	typeref:typename:void
CompileCode	Astro8-Emulator/main.cpp	/^string CompileCode(const string& inputcode)$/;"	f	typeref:typename:string
ComputeStepInstructions	Astro8-Emulator/main.cpp	/^void ComputeStepInstructions(const std::string& stepContents, char* stepComputedInstruction)$/;"	f	typeref:typename:void
ConvertAsciiToSdcii	Astro8-Emulator/main.cpp	/^int ConvertAsciiToSdcii(int asciiCode)$/;"	f	typeref:typename:int
ConvertNoteIndexToFrequency	Astro8-Emulator/main.cpp	/^uint16_t ConvertNoteIndexToFrequency(uint8_t index)$/;"	f	typeref:typename:uint16_t
ConvertSdciiToAscii	Astro8-Emulator/main.cpp	/^int ConvertSdciiToAscii(int sdciiCode)$/;"	f	typeref:typename:int
DEV_MODE	Astro8-Emulator/main.cpp	/^#define DEV_MODE /;"	d	file:
DIV	Astro8-Emulator/main.cpp	/^	DIV,$/;"	e	enum:AllInstructions	file:
DecToBin	Astro8-Emulator/main.cpp	/^string DecToBin(int input)$/;"	f	typeref:typename:string
DecToBinFilled	Astro8-Emulator/main.cpp	/^string DecToBinFilled(int input, int desiredSize)$/;"	f	typeref:typename:string
DecToHexFilled	Astro8-Emulator/main.cpp	/^string DecToHexFilled(int input, int desiredSize)$/;"	f	typeref:typename:string
DisplayTexture	Astro8-Emulator/main.cpp	/^void DisplayTexture(SDL_Renderer* renderer, SDL_Texture* texture)$/;"	f	typeref:typename:void
Draw	Astro8-Emulator/main.cpp	/^void Draw()$/;"	f	typeref:typename:void
DrawNextPixel	Astro8-Emulator/main.cpp	/^void DrawNextPixel()$/;"	f	typeref:typename:void
DrawPixel	Astro8-Emulator/main.cpp	/^void DrawPixel(int x, int y, int r, int g, int b)$/;"	f	typeref:typename:void
FindLabelLine	Astro8-Emulator/main.cpp	/^int FindLabelLine(const string& labelName, const vector<string>& labels, const vector<int>& labe/;"	f	typeref:typename:int
FullInstruction	Astro8-Emulator/main.cpp	/^using FullInstruction = uint16_t;$/;"	t	typeref:typename:uint16_t	file:
GenerateAsciiSdciiTables	Astro8-Emulator/main.cpp	/^void GenerateAsciiSdciiTables()$/;"	f	typeref:typename:void
GenerateCharacterROM	Astro8-Emulator/main.cpp	/^int GenerateCharacterROM()$/;"	f	typeref:typename:int
GenerateMicrocode	Astro8-Emulator/main.cpp	/^void GenerateMicrocode()$/;"	f	typeref:typename:void
GetLineNumber	Astro8-Emulator/main.cpp	/^int GetLineNumber()$/;"	f	typeref:typename:int
GetMem	Astro8-Emulator/main.cpp	/^uint16_t GetMem(uint16_t bank, uint16_t address)$/;"	f	typeref:typename:uint16_t
GetVariableAddress	Astro8-Emulator/main.cpp	/^int GetVariableAddress(const string& id)$/;"	f	typeref:typename:int
GetVariableNameFromAddress	Astro8-Emulator/main.cpp	/^std::string GetVariableNameFromAddress(int addr)$/;"	f	typeref:typename:std::string
HexToBin	Astro8-Emulator/main.cpp	/^string HexToBin(const string& s, int desiredSize)$/;"	f	typeref:typename:string
HexToDec	Astro8-Emulator/main.cpp	/^int HexToDec(const string& hex)$/;"	f	typeref:typename:int
InitGraphics	Astro8-Emulator/main.cpp	/^int InitGraphics(const std::string& windowTitle, int width, int height, int pixelScale)$/;"	f	typeref:typename:int
InstructionReg	Astro8-Emulator/main.cpp	/^uint16_t InstructionReg = 0;$/;"	v	typeref:typename:uint16_t
IsBin	Astro8-Emulator/main.cpp	/^bool IsBin(const string& in)$/;"	f	typeref:typename:bool
IsDec	Astro8-Emulator/main.cpp	/^bool IsDec(const string& in)$/;"	f	typeref:typename:bool
IsHex	Astro8-Emulator/main.cpp	/^bool IsHex(const string& in)$/;"	f	typeref:typename:bool
IsLabel	Astro8-Emulator/main.cpp	/^bool IsLabel(const string& in)$/;"	f	typeref:typename:bool
IsPointer	Astro8-Emulator/main.cpp	/^bool IsPointer(const string& in)$/;"	f	typeref:typename:bool
IsReg	Astro8-Emulator/main.cpp	/^bool IsReg(const string& in)$/;"	f	typeref:typename:bool
IsVar	Astro8-Emulator/main.cpp	/^bool IsVar(const string& in)$/;"	f	typeref:typename:bool
JMP	Astro8-Emulator/main.cpp	/^	JMP,$/;"	e	enum:AllInstructions	file:
JMPC	Astro8-Emulator/main.cpp	/^	JMPC,$/;"	e	enum:AllInstructions	file:
JMPZ	Astro8-Emulator/main.cpp	/^	JMPZ,$/;"	e	enum:AllInstructions	file:
JREG	Astro8-Emulator/main.cpp	/^	JREG,$/;"	e	enum:AllInstructions	file:
KeyPress	Astro8-Emulator/main.cpp	/^	KeyPress(int key, bool isPressed)$/;"	f	class:KeyPress	file:
KeyPress	Astro8-Emulator/main.cpp	/^class KeyPress {$/;"	c	file:
LDAIN	Astro8-Emulator/main.cpp	/^	LDAIN,$/;"	e	enum:AllInstructions	file:
LDIA	Astro8-Emulator/main.cpp	/^	LDIA,$/;"	e	enum:AllInstructions	file:
LDIB	Astro8-Emulator/main.cpp	/^	LDIB,$/;"	e	enum:AllInstructions	file:
LDLGE	Astro8-Emulator/main.cpp	/^	LDLGE,$/;"	e	enum:AllInstructions	file:
LDW	Astro8-Emulator/main.cpp	/^	LDW,$/;"	e	enum:AllInstructions	file:
LDWB	Astro8-Emulator/main.cpp	/^	LDWB,$/;"	e	enum:AllInstructions	file:
LoadAddress	Astro8-Emulator/main.cpp	/^void LoadAddress(const string& reg, const string& address)$/;"	f	typeref:typename:void
LoadPointer	Astro8-Emulator/main.cpp	/^void LoadPointer(const string& str)$/;"	f	typeref:typename:void
MICROINSTR_SIZE	Astro8-Emulator/main.cpp	/^#define MICROINSTR_SIZE /;"	d	file:
MULT	Astro8-Emulator/main.cpp	/^	MULT,$/;"	e	enum:AllInstructions	file:
MicroInstruction	Astro8-Emulator/main.cpp	/^using MicroInstruction = uint16_t;$/;"	t	typeref:typename:uint16_t	file:
MoveFromRegToReg	Astro8-Emulator/main.cpp	/^string MoveFromRegToReg(const string& from, const string& destination)$/;"	f	typeref:typename:string
NOP	Astro8-Emulator/main.cpp	/^	NOP = 0,$/;"	e	enum:AllInstructions	file:
NOT	Astro8-Emulator/main.cpp	/^	NOT,$/;"	e	enum:AllInstructions	file:
OR	Astro8-Emulator/main.cpp	/^	OR,$/;"	e	enum:AllInstructions	file:
PCR	Astro8-Emulator/main.cpp	/^	PCR,$/;"	e	enum:AllInstructions	file:
ParseValue	Astro8-Emulator/main.cpp	/^int ParseValue(const string& input)$/;"	f	typeref:typename:int
PutSetOnCurrentLine	Astro8-Emulator/main.cpp	/^void PutSetOnCurrentLine(const string& value)$/;"	f	typeref:typename:void
READ_CR	Astro8-Emulator/main.cpp	/^	READ_CR = 0b0000000001100000,$/;"	e	enum:ReadInstruction	file:
READ_IR	Astro8-Emulator/main.cpp	/^	READ_IR = 0b0000000001010000,$/;"	e	enum:ReadInstruction	file:
READ_MASK	Astro8-Emulator/main.cpp	/^	READ_MASK = 0b0000000001110000,$/;"	e	enum:ReadInstruction	file:
READ_RA	Astro8-Emulator/main.cpp	/^	READ_RA = 0b0000000000010000,$/;"	e	enum:ReadInstruction	file:
READ_RB	Astro8-Emulator/main.cpp	/^	READ_RB = 0b0000000000100000,$/;"	e	enum:ReadInstruction	file:
READ_RC	Astro8-Emulator/main.cpp	/^	READ_RC = 0b0000000000110000,$/;"	e	enum:ReadInstruction	file:
READ_RM	Astro8-Emulator/main.cpp	/^	READ_RM = 0b0000000001000000,$/;"	e	enum:ReadInstruction	file:
ReadInstruction	Astro8-Emulator/main.cpp	/^enum ReadInstruction : MicroInstruction {$/;"	g	typeref:typename:MicroInstruction	file:
RegIdToLDI	Astro8-Emulator/main.cpp	/^void RegIdToLDI(const string& in, const string& followingValue)$/;"	f	typeref:typename:void
STA	Astro8-Emulator/main.cpp	/^	STA,$/;"	e	enum:AllInstructions	file:
STANDALONE_CE	Astro8-Emulator/main.cpp	/^	STANDALONE_CE = 0b0100000000000000,$/;"	e	enum:StandaloneInstruction	file:
STANDALONE_EI	Astro8-Emulator/main.cpp	/^	STANDALONE_EI = 0b0001000000000000,$/;"	e	enum:StandaloneInstruction	file:
STANDALONE_EO	Astro8-Emulator/main.cpp	/^	STANDALONE_EO = 0b1000000000000000,$/;"	e	enum:StandaloneInstruction	file:
STANDALONE_FL	Astro8-Emulator/main.cpp	/^	STANDALONE_FL = 0b0000100000000000,$/;"	e	enum:StandaloneInstruction	file:
STANDALONE_ST	Astro8-Emulator/main.cpp	/^	STANDALONE_ST = 0b0010000000000000,$/;"	e	enum:StandaloneInstruction	file:
STAOUT	Astro8-Emulator/main.cpp	/^	STAOUT,$/;"	e	enum:AllInstructions	file:
STLGE	Astro8-Emulator/main.cpp	/^	STLGE,$/;"	e	enum:AllInstructions	file:
SUB	Astro8-Emulator/main.cpp	/^	SUB,$/;"	e	enum:AllInstructions	file:
SWP	Astro8-Emulator/main.cpp	/^	SWP,$/;"	e	enum:AllInstructions	file:
SWPC	Astro8-Emulator/main.cpp	/^	SWPC,$/;"	e	enum:AllInstructions	file:
SYS_PAUSE	Astro8-Emulator/main.cpp	/^	#define SYS_PAUSE /;"	d	file:
Save_Frame	Astro8-Emulator/main.cpp	/^void Save_Frame(const ::std::string& name, vector<unsigned char> img_vals)$/;"	f	typeref:typename:void
SetMem	Astro8-Emulator/main.cpp	/^void SetMem(uint16_t bank, uint16_t address, uint16_t data)$/;"	f	typeref:typename:void
SimplifiedHertz	Astro8-Emulator/main.cpp	/^std::string SimplifiedHertz(float input)$/;"	f	typeref:typename:std::string
StandaloneInstruction	Astro8-Emulator/main.cpp	/^enum StandaloneInstruction : MicroInstruction {$/;"	g	typeref:typename:MicroInstruction	file:
StoreAddress	Astro8-Emulator/main.cpp	/^void StoreAddress(const string& reg, const string& address)$/;"	f	typeref:typename:void
StoreIntoPointer	Astro8-Emulator/main.cpp	/^void StoreIntoPointer(const string& str)$/;"	f	typeref:typename:void
TARGET_RENDER_FPS	Astro8-Emulator/main.cpp	/^#define TARGET_RENDER_FPS /;"	d	file:
Update	Astro8-Emulator/main.cpp	/^void Update()$/;"	f	typeref:typename:void
VBUF	Astro8-Emulator/main.cpp	/^	VBUF,$/;"	e	enum:AllInstructions	file:
VERSION	Astro8-Emulator/main.cpp	/^std::string VERSION = "Astro-8 VERSION: v3.4.3-alpha";$/;"	v	typeref:typename:std::string
VecToString	Astro8-Emulator/main.cpp	/^std::string VecToString(const vector<std::string>& vec)$/;"	f	typeref:typename:std::string
VideoBufReg	Astro8-Emulator/main.cpp	/^bool VideoBufReg = false;$/;"	v	typeref:typename:bool
WRITE_AW	Astro8-Emulator/main.cpp	/^	WRITE_AW = 0b0000010000000000,$/;"	e	enum:WriteInstruction	file:
WRITE_BNK	Astro8-Emulator/main.cpp	/^	WRITE_BNK = 0b0000010010000000,$/;"	e	enum:WriteInstruction	file:
WRITE_DW	Astro8-Emulator/main.cpp	/^	WRITE_DW = 0b0000001010000000,$/;"	e	enum:WriteInstruction	file:
WRITE_IW	Astro8-Emulator/main.cpp	/^	WRITE_IW = 0b0000001000000000,$/;"	e	enum:WriteInstruction	file:
WRITE_J	Astro8-Emulator/main.cpp	/^	WRITE_J = 0b0000001110000000,$/;"	e	enum:WriteInstruction	file:
WRITE_MASK	Astro8-Emulator/main.cpp	/^	WRITE_MASK = 0b0000011110000000,$/;"	e	enum:WriteInstruction	file:
WRITE_VBUF	Astro8-Emulator/main.cpp	/^	WRITE_VBUF = 0b0000010100000000,$/;"	e	enum:WriteInstruction	file:
WRITE_WA	Astro8-Emulator/main.cpp	/^	WRITE_WA = 0b0000000010000000,$/;"	e	enum:WriteInstruction	file:
WRITE_WB	Astro8-Emulator/main.cpp	/^	WRITE_WB = 0b0000000100000000,$/;"	e	enum:WriteInstruction	file:
WRITE_WC	Astro8-Emulator/main.cpp	/^	WRITE_WC = 0b0000000110000000,$/;"	e	enum:WriteInstruction	file:
WRITE_WM	Astro8-Emulator/main.cpp	/^	WRITE_WM = 0b0000001100000000,$/;"	e	enum:WriteInstruction	file:
WriteInstruction	Astro8-Emulator/main.cpp	/^enum WriteInstruction : MicroInstruction {$/;"	g	typeref:typename:MicroInstruction	file:
__anon5af039410102	Astro8-Emulator/main.cpp	/^		[](double frequency, double time) {$/;"	f	function:main	file:
__anon5af039410202	Astro8-Emulator/main.cpp	/^		[](double frequency, double time) {$/;"	f	function:main	file:
__anon5af039410302	Astro8-Emulator/main.cpp	/^		[](double frequency, double time) {$/;"	f	function:main	file:
__anon5af039410402	Astro8-Emulator/main.cpp	/^		[](double frequency, double time) {$/;"	f	function:main	file:
aluInstructionSpecialAddress	Astro8-Emulator/main.cpp	/^std::string aluInstructionSpecialAddress[] = {"SU", "MU", "DI", "SL", "SR", "AND", "OR", "NOT"};$/;"	v	typeref:typename:std::string[]
apply_pixels	Astro8-Emulator/main.cpp	/^void apply_pixels($/;"	f	typeref:typename:void
ascToSdcii	Astro8-Emulator/main.cpp	/^uint8_t ascToSdcii[600];$/;"	v	typeref:typename:uint8_t[600]
asciiToSdcii	Astro8-Emulator/main.cpp	/^uint8_t asciiToSdcii[600];$/;"	v	typeref:typename:uint8_t[600]
assembleOnly	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
bus	Astro8-Emulator/main.cpp	/^int bus = 0;$/;"	v	typeref:typename:int
channelsPlaying	Astro8-Emulator/main.cpp	/^bool channelsPlaying[] = {false, false, false, false};$/;"	v	typeref:typename:bool[]
charPixX	Astro8-Emulator/main.cpp	/^uint8_t charPixX = 0;$/;"	v	typeref:typename:uint8_t
charPixY	Astro8-Emulator/main.cpp	/^uint8_t charPixY = 0;$/;"	v	typeref:typename:uint8_t
charToString	Astro8-Emulator/main.cpp	/^std::string charToString(char* a)$/;"	f	typeref:typename:std::string
characterRamIndex	Astro8-Emulator/main.cpp	/^uint16_t characterRamIndex = 0;$/;"	v	typeref:typename:uint16_t
characterRom	Astro8-Emulator/main.cpp	/^vector<bool> characterRom;$/;"	v	typeref:typename:vector<bool>
clamp	Astro8-Emulator/main.cpp	/^int clamp(int x, int min, int max)$/;"	f	typeref:typename:int
clear_buffers	Astro8-Emulator/main.cpp	/^void clear_buffers(SDL_Renderer* renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f	typeref:typename:void
compileOnly	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
compiledLines	Astro8-Emulator/main.cpp	/^vector<string> compiledLines;$/;"	v	typeref:typename:vector<string>
destroy	Astro8-Emulator/main.cpp	/^void destroy(SDL_Renderer* renderer, SDL_Window* window)$/;"	f	typeref:typename:void
executableDirectory	Astro8-Emulator/main.cpp	/^std::string executableDirectory;$/;"	v	typeref:typename:std::string
explode	Astro8-Emulator/main.cpp	/^vector<std::string> explode(const std::string& str, const char& ch)$/;"	f	typeref:typename:vector<std::string>
flags	Astro8-Emulator/main.cpp	/^uint8_t flags[2] = {0, 0};$/;"	v	typeref:typename:uint8_t[2]
flagtypes	Astro8-Emulator/main.cpp	/^std::string flagtypes[] = {"ZEROFLAG", "CARRYFLAG"};$/;"	v	typeref:typename:std::string[]
gRenderer	Astro8-Emulator/main.cpp	/^SDL_Renderer* gRenderer = NULL;$/;"	v	typeref:typename:SDL_Renderer *
gScreenSurface	Astro8-Emulator/main.cpp	/^SDL_Surface* gScreenSurface = NULL;$/;"	v	typeref:typename:SDL_Surface *
gWindow	Astro8-Emulator/main.cpp	/^SDL_Window* gWindow = NULL;$/;"	v	typeref:typename:SDL_Window *
helpDialog	Astro8-Emulator/main.cpp	/^std::string helpDialog = R"V0G0N($/;"	v	typeref:typename:std::string
imageOnlyMode	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
imageOnlyModeFrameCount	Astro8-Emulator/main.cpp	/^uint16_t imageOnlyModeFrameCount = 10;$/;"	v	typeref:typename:uint16_t
imageOnlyModeFrames	Astro8-Emulator/main.cpp	/^uint16_t imageOnlyModeFrames = 10;$/;"	v	typeref:typename:uint16_t
imgX	Astro8-Emulator/main.cpp	/^uint8_t imgX = 0;$/;"	v	typeref:typename:uint8_t
imgY	Astro8-Emulator/main.cpp	/^uint8_t imgY = 0;$/;"	v	typeref:typename:uint8_t
instructioncodes	Astro8-Emulator/main.cpp	/^std::string instructioncodes[] = {$/;"	v	typeref:typename:std::string[]
instructions	Astro8-Emulator/main.cpp	/^vector<std::string> instructions = {"NOP", "AIN", "BIN", "CIN", "LDIA", "LDIB", "STA", "ADD", "S/;"	v	typeref:typename:vector<std::string>
isDown	Astro8-Emulator/main.cpp	/^	bool isDown = true;	 \/\/ Differ between sending down\/up signal$/;"	m	class:KeyPress	typeref:typename:bool	file:
isPlaying	Astro8-Emulator/main.cpp	/^bool isPlaying[4] = {false, false, false, false};$/;"	v	typeref:typename:bool[4]
keyCode	Astro8-Emulator/main.cpp	/^	uint16_t keyCode;$/;"	m	class:KeyPress	typeref:typename:uint16_t	file:
labelLineValues	Astro8-Emulator/main.cpp	/^vector<int> labelLineValues;$/;"	v	typeref:typename:vector<int>
labels	Astro8-Emulator/main.cpp	/^vector<string> labels;$/;"	v	typeref:typename:vector<string>
lastFreq	Astro8-Emulator/main.cpp	/^float lastFreq[4] = {440, 440, 440, 440};$/;"	v	typeref:typename:float[4]
main	Astro8-Emulator/main.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
memoryBytes	Astro8-Emulator/main.cpp	/^vector<vector<uint16_t>> memoryBytes;$/;"	v	typeref:typename:vector<vector<uint16_t>>
memoryIndex	Astro8-Emulator/main.cpp	/^uint16_t memoryIndex = 0;$/;"	v	typeref:typename:uint16_t
microinstructionData	Astro8-Emulator/main.cpp	/^MicroInstruction microinstructionData[2048];$/;"	v	typeref:typename:MicroInstruction[2048]
microinstructions	Astro8-Emulator/main.cpp	/^std::string microinstructions[] = {"EO", "CE", "ST", "EI", "FL"};$/;"	v	typeref:typename:std::string[]
operator !=	Astro8-Emulator/main.cpp	/^bool operator!=(const KeyPress& k1, const KeyPress& k2)$/;"	f	typeref:typename:bool
operator ==	Astro8-Emulator/main.cpp	/^bool operator==(const KeyPress& k1, const KeyPress& k2)$/;"	f	typeref:typename:bool
optimizeAssembly	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
outputReg	Astro8-Emulator/main.cpp	/^uint16_t outputReg = 0;$/;"	v	typeref:typename:uint16_t
parseCode	Astro8-Emulator/main.cpp	/^vector<vector<std::string>> parseCode(const std::string& input)$/;"	f	typeref:typename:vector<vector<std::string>>
performanceMode	Astro8-Emulator/main.cpp	/^bool usingKeyboard = true, usingMouse = true, performanceMode = true, usingFileSystem = true;$/;"	v	typeref:typename:bool
pixelRamIndex	Astro8-Emulator/main.cpp	/^uint16_t pixelRamIndex = 0;$/;"	v	typeref:typename:uint16_t
pixels	Astro8-Emulator/main.cpp	/^std::vector<unsigned char> pixels(108 * 108 * 4, 0);$/;"	v	typeref:typename:std::vector<unsigned char>
programCounter	Astro8-Emulator/main.cpp	/^uint16_t programCounter = 0;$/;"	v	typeref:typename:uint16_t
projectDirectory	Astro8-Emulator/main.cpp	/^std::string projectDirectory;$/;"	v	typeref:typename:std::string
r	Astro8-Emulator/main.cpp	/^SDL_Rect r;$/;"	v	typeref:typename:SDL_Rect
readInstructionSpecialAddress	Astro8-Emulator/main.cpp	/^std::string readInstructionSpecialAddress[] = {"RA", "RB", "RC", "RM", "IR", "CR"};$/;"	v	typeref:typename:std::string[]
runAstroExecutable	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
sdciiToAscii	Astro8-Emulator/main.cpp	/^uint8_t sdciiToAscii[600];$/;"	v	typeref:typename:uint8_t[600]
set_pixel	Astro8-Emulator/main.cpp	/^void set_pixel($/;"	f	typeref:typename:void
superVerbose	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
target_cpu_freq	Astro8-Emulator/main.cpp	/^uint32_t target_cpu_freq = 16000000;$/;"	v	typeref:typename:uint32_t
texture	Astro8-Emulator/main.cpp	/^SDL_Texture* texture;$/;"	v	typeref:typename:SDL_Texture *
tone	Astro8-Emulator/main.cpp	/^Tone* tone[4];$/;"	v	typeref:typename:Tone * [4]
uses	Astro8-Emulator/main.cpp	/^	int uses = 2;$/;"	m	class:KeyPress	typeref:typename:int	file:
usingFileSystem	Astro8-Emulator/main.cpp	/^bool usingKeyboard = true, usingMouse = true, performanceMode = true, usingFileSystem = true;$/;"	v	typeref:typename:bool
usingKeyboard	Astro8-Emulator/main.cpp	/^bool usingKeyboard = true, usingMouse = true, performanceMode = true, usingFileSystem = true;$/;"	v	typeref:typename:bool
usingMouse	Astro8-Emulator/main.cpp	/^bool usingKeyboard = true, usingMouse = true, performanceMode = true, usingFileSystem = true;$/;"	v	typeref:typename:bool
usingWebcam	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
variableMap	Astro8-Emulator/main.cpp	/^std::map<std::string, int> variableMap;$/;"	v	typeref:typename:std::map<std::string,int>
vars	Astro8-Emulator/main.cpp	/^vector<string> vars;$/;"	v	typeref:typename:vector<string>
verbose	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
videoBuffer	Astro8-Emulator/main.cpp	/^vector<vector<uint16_t>> videoBuffer;$/;"	v	typeref:typename:vector<vector<uint16_t>>
writeInstructionSpecialAddress	Astro8-Emulator/main.cpp	/^std::string writeInstructionSpecialAddress[] = {"WA", "WB", "WC", "IW", "DW", "WM", "J", "AW", "/;"	v	typeref:typename:std::string[]
