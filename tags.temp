!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/sam/Code/Astro8-Computer/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(VERBOSE).SILENT	Astro8-Emulator/linux-build/Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE)MAKESILENT	Astro8-Emulator/linux-build/Makefile	/^$(VERBOSE)MAKESILENT = -s$/;"	m
%	Astro8-Emulator/linux-build/Makefile	/^% : %,v$/;"	t
%	Astro8-Emulator/linux-build/Makefile	/^% : RCS\/%$/;"	t
%	Astro8-Emulator/linux-build/Makefile	/^% : RCS\/%,v$/;"	t
%	Astro8-Emulator/linux-build/Makefile	/^% : SCCS\/s.%$/;"	t
%	Astro8-Emulator/linux-build/Makefile	/^% : s.%$/;"	t
A0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double A0 = 27.50;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
A1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double A1 = 55.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
A2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double A2 = 110.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
A3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double A3 = 220.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
A4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double A4 = 440.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
A5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double A5 = 880.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
A6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double A6 = 1760.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
A7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double A7 = 3520.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
A8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double A8 = 7040.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
ADSREnvelope	Astro8-Emulator/VSSynth/utils/Envelope.h	/^        ADSREnvelope(double attack, double sustain, double attackTime, double decayTime, double /;"	f	struct:VSSynth::ADSREnvelope
ADSREnvelope	Astro8-Emulator/VSSynth/utils/Envelope.h	/^    struct ADSREnvelope$/;"	s	namespace:VSSynth
ATTACK	Astro8-Emulator/VSSynth/utils/Envelope.h	/^            ATTACK,$/;"	e	enum:VSSynth::Envelope::Curves
Ab0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ab0 = 25.96;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ab1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ab1 = 51.91;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ab2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ab2 = 103.83;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ab3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ab3 = 207.65;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ab4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ab4 = 415.30;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ab5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ab5 = 830.61;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ab6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ab6 = 1661.22;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ab7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ab7 = 3322.44;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ab8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ab8 = 6644.88;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
AccomodateSetInProgramRange	Astro8-Emulator/colorprint.h	/^static bool AccomodateSetInProgramRange(std::string entireLine, int currentLineCount)$/;"	f	typeref:typename:bool
As0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double As0 = 29.14;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
As1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double As1 = 58.27;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
As2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double As2 = 116.54;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
As3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double As3 = 233.08;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
As4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double As4 = 466.16;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
As5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double As5 = 932.33;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
As6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double As6 = 1864.66;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
As7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double As7 = 3729.31;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
As8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double As8 = 7458.62;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Attack	Astro8-Emulator/audio.h	/^	enum class EnvelopeGeneratorState { Off, Attack, Decay, Sustain, Release };$/;"	e	enum:Hyper_BandCHIP::EnvelopeGeneratorState
Audio	Astro8-Emulator/audio.h	/^	class Audio$/;"	c	namespace:Hyper_BandCHIP
AudioDevice	Astro8-Emulator/audio.h	/^		SDL_AudioDeviceID AudioDevice;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:SDL_AudioDeviceID
AudioDevice	Astro8-Emulator/audio.h	/^		SDL_AudioDeviceID AudioDevice;$/;"	m	class:Hyper_BandCHIP::SampleAudio	typeref:typename:SDL_AudioDeviceID
AudioFrame	Astro8-Emulator/audio.h	/^		using AudioFrame = std::array<int, 4096 * channels>;$/;"	t	class:Hyper_BandCHIP::SampleAudio	typeref:typename:std::array<int,4096* channels>
AudioFrame	Astro8-Emulator/audio.h	/^		using AudioFrame = std::array<int, 8192>;$/;"	t	class:Hyper_BandCHIP::Audio	typeref:typename:std::array<int,8192>
AudioProcessor	Astro8-Emulator/audio.h	/^		static void AudioProcessor(SampleAudio<channels, voices>* Audio)$/;"	f	class:Hyper_BandCHIP::SampleAudio	typeref:typename:void
B0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double B0 = 30.87;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
B1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double B1 = 61.74;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
B2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double B2 = 123.47;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
B3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double B3 = 246.94;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
B4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double B4 = 493.88;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
B5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double B5 = 987.77;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
B6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double B6 = 1975.53;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
B7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double B7 = 3951.07;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
B8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double B8 = 7902.13;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
BAD_COLOR	Astro8-Emulator/color.hpp	/^    constexpr int BAD_COLOR = -256;$/;"	v	namespace:hue	typeref:typename:int
BASS	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch BASS = [](double freq, double time) {$/;"	v	namespace:VSSynth::Patches	typeref:typename:const Patch
BASS_ENVELOPE	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const ADSREnvelope BASS_ENVELOPE(1.00f, 0.15f, 0.001f, 0.1f, 0.80f, false);$/;"	v	namespace:VSSynth::Patches	typeref:typename:const ADSREnvelope
BRASS	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch BRASS = [](double freq, double time) {$/;"	v	namespace:VSSynth::Patches	typeref:typename:const Patch
BRASS_ENVELOPE	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const ADSREnvelope BRASS_ENVELOPE(0.90f, 0.30f, 0.1f, 0.1f, 0.05f);$/;"	v	namespace:VSSynth::Patches	typeref:typename:const ADSREnvelope
Bb0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Bb0 = 29.14;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Bb1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Bb1 = 58.27;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Bb2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Bb2 = 116.54;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Bb3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Bb3 = 233.08;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Bb4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Bb4 = 466.16;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Bb5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Bb5 = 932.33;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Bb6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Bb6 = 1864.66;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Bb7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Bb7 = 3729.31;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Bb8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Bb8 = 7458.62;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
BinToDec	ResourceGenerator/Program.cs	/^    static int BinToDec(string input)$/;"	m	class:Program	file:
BinToHexFilled	ResourceGenerator/Program.cs	/^    static string BinToHexFilled(string input, int desiredSize)$/;"	m	class:Program	file:
C0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double C0 = 16.35;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
C1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double C1 = 32.70;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
C2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double C2 = 65.41;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
C3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double C3 = 130.81;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
C4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double C4 = 261.63;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
C5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double C5 = 523.25;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
C6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double C6 = 1046.50;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
C7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double C7 = 2093.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
C8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double C8 = 4186.01;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
CAPTURE_BACKLIGHTCOMPENSATION	Astro8-Emulator/escapi.h	/^	CAPTURE_BACKLIGHTCOMPENSATION,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_BRIGHTNESS	Astro8-Emulator/escapi.h	/^	CAPTURE_BRIGHTNESS,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_COLORENABLE	Astro8-Emulator/escapi.h	/^	CAPTURE_COLORENABLE,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_CONTRAST	Astro8-Emulator/escapi.h	/^	CAPTURE_CONTRAST,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_EXPOSURE	Astro8-Emulator/escapi.h	/^	CAPTURE_EXPOSURE,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_FOCUS	Astro8-Emulator/escapi.h	/^	CAPTURE_FOCUS,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_GAIN	Astro8-Emulator/escapi.h	/^	CAPTURE_GAIN,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_GAMMA	Astro8-Emulator/escapi.h	/^	CAPTURE_GAMMA,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_HUE	Astro8-Emulator/escapi.h	/^	CAPTURE_HUE,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_IRIS	Astro8-Emulator/escapi.h	/^	CAPTURE_IRIS,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_PAN	Astro8-Emulator/escapi.h	/^	CAPTURE_PAN,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_PROPETIES	Astro8-Emulator/escapi.h	/^enum CAPTURE_PROPETIES$/;"	g
CAPTURE_PROP_MAX	Astro8-Emulator/escapi.h	/^	CAPTURE_PROP_MAX$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_ROLL	Astro8-Emulator/escapi.h	/^	CAPTURE_ROLL,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_SATURATION	Astro8-Emulator/escapi.h	/^	CAPTURE_SATURATION,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_SHARPNESS	Astro8-Emulator/escapi.h	/^	CAPTURE_SHARPNESS,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_TILT	Astro8-Emulator/escapi.h	/^	CAPTURE_TILT,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_WHITEBALANCE	Astro8-Emulator/escapi.h	/^	CAPTURE_WHITEBALANCE,$/;"	e	enum:CAPTURE_PROPETIES
CAPTURE_ZOOM	Astro8-Emulator/escapi.h	/^	CAPTURE_ZOOM,$/;"	e	enum:CAPTURE_PROPETIES
CMAKE_BINARY_DIR	Astro8-Emulator/linux-build/Makefile	/^CMAKE_BINARY_DIR = \/home\/sam\/Code\/Astro8-Computer\/Astro8-Emulator\/linux-build$/;"	m
CMAKE_COMMAND	Astro8-Emulator/linux-build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_CROSSCOMPILING	Astro8-Emulator/linux-build/cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CXX_FLAGS	Astro8-Emulator/CMakeLists.txt	/^set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")$/;"	v
CMAKE_CXX_STANDARD	Astro8-Emulator/CMakeLists.txt	/^set(CMAKE_CXX_STANDARD 17)$/;"	v
CMAKE_CXX_STANDARD_REQUIRED	Astro8-Emulator/CMakeLists.txt	/^set(CMAKE_CXX_STANDARD_REQUIRED ON)$/;"	v
CMAKE_INSTALL_COMPONENT	Astro8-Emulator/linux-build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v
CMAKE_INSTALL_COMPONENT	Astro8-Emulator/linux-build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v
CMAKE_INSTALL_CONFIG_NAME	Astro8-Emulator/linux-build/cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "")$/;"	v
CMAKE_INSTALL_MANIFEST	Astro8-Emulator/linux-build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	Astro8-Emulator/linux-build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")$/;"	v
CMAKE_INSTALL_PREFIX	Astro8-Emulator/linux-build/cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v
CMAKE_INSTALL_SO_NO_EXE	Astro8-Emulator/linux-build/cmake_install.cmake	/^  set(CMAKE_INSTALL_SO_NO_EXE "1")$/;"	v
CMAKE_MODULE_PATH	Astro8-Emulator/CMakeLists.txt	/^set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_LIST_DIR}\/cmake")$/;"	v
CMAKE_OBJDUMP	Astro8-Emulator/linux-build/cmake_install.cmake	/^  set(CMAKE_OBJDUMP "\/usr\/bin\/objdump")$/;"	v
CMAKE_SOURCE_DIR	Astro8-Emulator/linux-build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/sam\/Code\/Astro8-Computer\/Astro8-Emulator$/;"	m
CODES	Astro8-Emulator/color.hpp	/^    static const std::map<std::string, int> CODES = {$/;"	v	namespace:hue	typeref:typename:const std::map<std::string,int>
COLOR_HPP	Astro8-Emulator/color.hpp	/^#define COLOR_HPP$/;"	d
CYMBAL	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch CYMBAL = [](double freq, double time) {$/;"	v	namespace:VSSynth::Patches	typeref:typename:const Patch
CYMBAL_ENVELOPE	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const ADSREnvelope CYMBAL_ENVELOPE(0.90f, 0.30f, 0.001f, 0.5f, 1.00f);$/;"	v	namespace:VSSynth::Patches	typeref:typename:const ADSREnvelope
CharStrStartsWith	Astro8-Emulator/strops.cpp	/^bool CharStrStartsWith(unsigned char* str, char* substr, int len)$/;"	f	typeref:typename:bool
ColorAndPrintAssembly	Astro8-Emulator/colorprint.h	/^static void ColorAndPrintAssembly(std::string asmb, vector<std::string> instructions)$/;"	f	typeref:typename:void
CommaLargeNumber	Astro8-Emulator/strops.cpp	/^std::string CommaLargeNumber(long num)$/;"	f	typeref:typename:std::string
CommaLargeNumber	Astro8-Emulator/strops.cpp	/^std::string CommaLargeNumber(unsigned long long int num)$/;"	f	typeref:typename:std::string
CommaLargeNumberF	Astro8-Emulator/strops.cpp	/^std::string CommaLargeNumberF(double num)$/;"	f	typeref:typename:std::string
CommaLargeNumberF	Astro8-Emulator/strops.cpp	/^std::string CommaLargeNumberF(float num)$/;"	f	typeref:typename:std::string
CompareCharNumbers	Astro8-Emulator/strops.cpp	/^bool CompareCharNumbers(const unsigned char* number1, const unsigned char* number2)$/;"	f	typeref:typename:bool
CopyToAudioBuffer	Astro8-Emulator/audio.h	/^		void CopyToAudioBuffer(const unsigned char* memory, unsigned short start_address, unsigned cha/;"	f	class:Hyper_BandCHIP::SampleAudio	typeref:typename:void
Cs0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Cs0 = 17.32;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Cs1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Cs1 = 34.65;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Cs2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Cs2 = 69.30;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Cs3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Cs3 = 138.59;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Cs4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Cs4 = 277.18;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Cs5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Cs5 = 554.37;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Cs6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Cs6 = 1108.73;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Cs7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Cs7 = 2217.46;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Cs8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Cs8 = 4434.92;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Curves	Astro8-Emulator/VSSynth/utils/Envelope.h	/^        enum Curves$/;"	g	class:VSSynth::Envelope
D0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double D0 = 18.35;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
D1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double D1 = 36.71;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
D2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double D2 = 73.42;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
D3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double D3 = 146.83;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
D4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double D4 = 293.66;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
D5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double D5 = 587.33;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
D6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double D6 = 1174.66;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
D7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double D7 = 2349.32;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
D8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double D8 = 4698.63;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
DECAY	Astro8-Emulator/VSSynth/utils/Envelope.h	/^            DECAY,$/;"	e	enum:VSSynth::Envelope::Curves
DEFAULT_COLOR	Astro8-Emulator/color.hpp	/^    constexpr int DEFAULT_COLOR = 7;$/;"	v	namespace:hue	typeref:typename:int
Db0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Db0 = 17.32;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Db1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Db1 = 34.65;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Db2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Db2 = 69.30;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Db3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Db3 = 138.59;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Db4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Db4 = 277.18;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Db5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Db5 = 554.37;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Db6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Db6 = 1108.73;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Db7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Db7 = 2217.46;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Db8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Db8 = 4434.92;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
DecToBinFilled	ResourceGenerator/Program.cs	/^    static string DecToBinFilled(int input, int desiredSize)$/;"	m	class:Program	file:
DecToHexFilled	ResourceGenerator/Program.cs	/^    static string DecToHexFilled(int input, int desiredSize)$/;"	m	class:Program	file:
Decay	Astro8-Emulator/audio.h	/^	enum class EnvelopeGeneratorState { Off, Attack, Decay, Sustain, Release };$/;"	e	enum:Hyper_BandCHIP::EnvelopeGeneratorState
Ds0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ds0 = 19.45;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ds1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ds1 = 38.89;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ds2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ds2 = 77.78;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ds3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ds3 = 155.56;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ds4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ds4 = 311.13;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ds5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ds5 = 622.25;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ds6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ds6 = 1244.51;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ds7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ds7 = 2489.02;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Ds8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Ds8 = 4978.03;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
E0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double E0 = 20.60;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
E1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double E1 = 41.20;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
E2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double E2 = 82.41;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
E3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double E3 = 164.81;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
E4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double E4 = 329.63;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
E5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double E5 = 659.25;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
E6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double E6 = 1318.51;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
E7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double E7 = 2637.02;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
E8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double E8 = 5274.04;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
EGS	Astro8-Emulator/audio.h	/^		EnvelopeGeneratorState EGS;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:EnvelopeGeneratorState
EQUALS	Astro8-Emulator/linux-build/Makefile	/^EQUALS = =$/;"	m
ERRORMSG	Astro8-Emulator/strops.h	/^#define ERRORMSG(/;"	d
ESCAPIVersion	Astro8-Emulator/escapi.cpp	/^ESCAPIVersionProc ESCAPIVersion;$/;"	v	typeref:typename:ESCAPIVersionProc
ESCAPIVersionProc	Astro8-Emulator/escapi.h	/^typedef int (*ESCAPIVersionProc)();$/;"	t	typeref:typename:int (*)()
Eb0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Eb0 = 19.45;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Eb1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Eb1 = 38.89;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Eb2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Eb2 = 77.78;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Eb3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Eb3 = 155.56;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Eb4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Eb4 = 311.13;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Eb5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Eb5 = 622.25;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Eb6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Eb6 = 1244.51;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Eb7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Eb7 = 2489.02;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Eb8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Eb8 = 4978.03;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Envelope	Astro8-Emulator/VSSynth/utils/Envelope.h	/^    class Envelope$/;"	c	namespace:VSSynth
EnvelopeGeneratorState	Astro8-Emulator/audio.h	/^	enum class EnvelopeGeneratorState { Off, Attack, Decay, Sustain, Release };$/;"	g	namespace:Hyper_BandCHIP
ExtractPaddedChars	Astro8-Emulator/strops.cpp	/^std::string ExtractPaddedChars(const std::string& input, char padChar)$/;"	f	typeref:typename:std::string
F0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double F0 = 21.83;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
F1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double F1 = 43.65;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
F2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double F2 = 87.31;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
F3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double F3 = 174.61;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
F4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double F4 = 349.23;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
F5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double F5 = 698.46;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
F6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double F6 = 1396.91;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
F7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double F7 = 2793.83;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
F8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double F8 = 5587.65;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
FormatHPS	Astro8-Emulator/strops.cpp	/^std::string FormatHPS(float input)$/;"	f	typeref:typename:std::string
FormatWithCommas	Astro8-Emulator/strops.h	/^std::string FormatWithCommas(T value)$/;"	f	typeref:typename:std::string
Fs0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Fs0 = 23.12;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Fs1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Fs1 = 46.25;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Fs2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Fs2 = 92.50;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Fs3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Fs3 = 185.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Fs4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Fs4 = 369.99;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Fs5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Fs5 = 739.99;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Fs6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Fs6 = 1479.98;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Fs7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Fs7 = 2959.96;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Fs8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Fs8 = 5919.91;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
G0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double G0 = 24.50;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
G1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double G1 = 49.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
G2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double G2 = 98.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
G3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double G3 = 196.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
G4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double G4 = 392.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
G5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double G5 = 783.99;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
G6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double G6 = 1567.98;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
G7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double G7 = 3135.96;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
G8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double G8 = 6271.93;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
GLOCKENSPIEL	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch GLOCKENSPIEL = [](double freq, double time) {$/;"	v	namespace:VSSynth::Patches	typeref:typename:const Patch
GLOCKENSPIEL_ENVELOPE	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const ADSREnvelope GLOCKENSPIEL_ENVELOPE(0.90f, 0.30f, 0.1f, 0.1f, 1.00f, true);$/;"	v	namespace:VSSynth::Patches	typeref:typename:const ADSREnvelope
GUITAR	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch GUITAR = [](double freq, double time) {$/;"	v	namespace:VSSynth::Patches	typeref:typename:const Patch
GUITAR_ENVELOPE	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const ADSREnvelope GUITAR_ENVELOPE(1.00f, 0.15f, 0.001f, 0.1f, 0.80f, false);$/;"	v	namespace:VSSynth::Patches	typeref:typename:const ADSREnvelope
Gb0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gb0 = 23.12;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gb1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gb1 = 46.25;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gb2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gb2 = 92.50;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gb3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gb3 = 185.00;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gb4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gb4 = 369.99;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gb5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gb5 = 739.99;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gb6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gb6 = 1479.98;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gb7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gb7 = 2959.96;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gb8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gb8 = 5919.91;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
GenerateMicrocode	ResourceGenerator/Program.cs	/^    static void GenerateMicrocode()$/;"	m	class:Program	file:
Generators	Astro8-Emulator/VSSynth/SoundGenerator.h	/^    namespace Generators$/;"	n	namespace:VSSynth
Generators	Astro8-Emulator/VSSynth/generators/Instrument.h	/^    namespace Generators$/;"	n	namespace:VSSynth
Generators	Astro8-Emulator/VSSynth/generators/MonophonicInstrument.h	/^    namespace Generators$/;"	n	namespace:VSSynth
Generators	Astro8-Emulator/VSSynth/generators/PolyphonicInstrument.h	/^    namespace Generators$/;"	n	namespace:VSSynth
Generators	Astro8-Emulator/VSSynth/generators/Sequencer.h	/^    namespace Generators$/;"	n	namespace:VSSynth
Generators	Astro8-Emulator/VSSynth/generators/Tone.h	/^    namespace Generators$/;"	n	namespace:VSSynth
Gs0	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gs0 = 25.96;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gs1	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gs1 = 51.91;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gs2	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gs2 = 103.83;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gs3	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gs3 = 207.65;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gs4	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gs4 = 415.30;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gs5	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gs5 = 830.61;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gs6	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gs6 = 1661.22;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gs7	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gs7 = 3322.44;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
Gs8	Astro8-Emulator/VSSynth/utils/Notes.h	/^        const double Gs8 = 6644.88;$/;"	v	namespace:VSSynth::Notes	typeref:typename:const double
HexToBin	ResourceGenerator/Program.cs	/^    static string HexToBin(string hex, int desiredSize)$/;"	m	class:Program	file:
HexToDec	ResourceGenerator/Program.cs	/^    static int HexToDec(string hex)$/;"	m	class:Program	file:
Hyper_BandCHIP	Astro8-Emulator/audio.h	/^namespace Hyper_BandCHIP$/;"	n
IDI_ICON1	Astro8-Emulator/Astro8-Emulator.rc	/^IDI_ICON1               ICON                    "icon.ico"$/;"	i
IDI_ICON1	Astro8-Emulator/resource.h	/^#define IDI_ICON1 /;"	d
INACTIVE	Astro8-Emulator/VSSynth/utils/Envelope.h	/^            INACTIVE$/;"	e	enum:VSSynth::Envelope::Curves
IndentText	Astro8-Emulator/processing.h	/^std::string IndentText(std::string text)$/;"	f	typeref:typename:std::string
InitializeAudioBuffer	Astro8-Emulator/audio.h	/^		void InitializeAudioBuffer(unsigned char voice = 0)$/;"	f	class:Hyper_BandCHIP::SampleAudio	typeref:typename:void
Instrument	Astro8-Emulator/VSSynth/generators/Instrument.h	/^        class Instrument : public SoundGenerator$/;"	c	namespace:VSSynth::Generators
InvertExpression	Astro8-Emulator/processing.h	/^std::string InvertExpression(const std::string& expression)$/;"	f	typeref:typename:std::string
IsPaused	Astro8-Emulator/audio.h	/^		bool IsPaused(unsigned char voice = 0) const$/;"	f	class:Hyper_BandCHIP::SampleAudio	typeref:typename:bool
IsVersionGreaterOrEqual	Astro8-Emulator/strops.cpp	/^bool IsVersionGreaterOrEqual(std::string a, std::string b)$/;"	f	typeref:typename:bool
JoinArrayPieces	Astro8-Emulator/strops.cpp	/^std::string JoinArrayPieces(std::string input[])$/;"	f	typeref:typename:std::string
JoinArrayPieces	Astro8-Emulator/strops.cpp	/^std::string JoinArrayPieces(std::vector<std::string>& input)$/;"	f	typeref:typename:std::string
JoinRange	Astro8-Emulator/processing.h	/^std::string JoinRange(std::vector<std::string> strs, int start, int max)$/;"	f	typeref:typename:std::string
Main	ResourceGenerator/Program.cs	/^    public static void Main(string[] args)$/;"	m	class:Program
MakeCharacterRom	ResourceGenerator/Program.cs	/^    static void MakeCharacterRom()$/;"	m	class:Program	file:
Middleware	Astro8-Emulator/VSSynth/SynthMiddleware.h	/^    namespace Middleware$/;"	n	namespace:VSSynth
Middleware	Astro8-Emulator/VSSynth/middleware/WAVWriter.h	/^    namespace Middleware$/;"	n	namespace:VSSynth
MonophonicInstrument	Astro8-Emulator/VSSynth/generators/MonophonicInstrument.h	/^        class MonophonicInstrument : public Instrument$/;"	c	namespace:VSSynth::Generators
NAMES	Astro8-Emulator/color.hpp	/^    static const std::map<int, std::string> NAMES = {$/;"	v	namespace:hue	typeref:typename:const std::map<int,std::string>
NoteEvent	Astro8-Emulator/VSSynth/generators/Sequencer.h	/^            struct NoteEvent$/;"	s	class:VSSynth::Generators::Sequencer
Notes	Astro8-Emulator/VSSynth/utils/Notes.h	/^    namespace Notes$/;"	n	namespace:VSSynth
ORGAN	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch ORGAN = [](double freq, double time) {$/;"	v	namespace:VSSynth::Patches	typeref:typename:const Patch
ORGAN_ENVELOPE	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const ADSREnvelope ORGAN_ENVELOPE(0.90f, 0.30f, 0.1f, 0.1f, 0.40f);$/;"	v	namespace:VSSynth::Patches	typeref:typename:const ADSREnvelope
Off	Astro8-Emulator/audio.h	/^	enum class EnvelopeGeneratorState { Off, Attack, Decay, Sustain, Release };$/;"	e	enum:Hyper_BandCHIP::EnvelopeGeneratorState
PIANO	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch PIANO = [](double freq, double time) {$/;"	v	namespace:VSSynth::Patches	typeref:typename:const Patch
PIANO_ENVELOPE	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const ADSREnvelope PIANO_ENVELOPE(0.90f, 0.30f, 0.1f, 0.1f, 0.30f);$/;"	v	namespace:VSSynth::Patches	typeref:typename:const ADSREnvelope
PadString	Astro8-Emulator/strops.cpp	/^std::string PadString(const std::string& input, char padChar, size_t desiredLength)$/;"	f	typeref:typename:std::string
PadStringRight	Astro8-Emulator/strops.cpp	/^std::string PadStringRight(const std::string& input, char padChar, size_t desiredLength)$/;"	f	typeref:typename:std::string
Patch	Astro8-Emulator/VSSynth/utils/Patches.h	/^        typedef std::function<double(double, double)> Patch;$/;"	t	namespace:VSSynth::Patches
Patches	Astro8-Emulator/VSSynth/utils/Patches.h	/^    namespace Patches$/;"	n	namespace:VSSynth
PauseAudio	Astro8-Emulator/audio.h	/^		void PauseAudio(bool pause, unsigned char voice = 0)$/;"	f	class:Hyper_BandCHIP::SampleAudio	typeref:typename:void
PolyphonicInstrument	Astro8-Emulator/VSSynth/generators/PolyphonicInstrument.h	/^        class PolyphonicInstrument : public Instrument$/;"	c	namespace:VSSynth::Generators
PreProcess	Astro8-Emulator/processing.h	/^std::vector<std::string> PreProcess(std::string unProcessed)$/;"	f	typeref:typename:std::vector<std::string>
PrintColored	Astro8-Emulator/colorprint.h	/^static void PrintColored(std::string text, std::string fgColor, std::string bgColor)$/;"	f	typeref:typename:void
ProcessingThread	Astro8-Emulator/audio.h	/^		std::thread ProcessingThread;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:std::thread
ProcessingThread	Astro8-Emulator/audio.h	/^		std::thread ProcessingThread;$/;"	m	class:Hyper_BandCHIP::SampleAudio	typeref:typename:std::thread
Program	ResourceGenerator/Program.cs	/^public class Program$/;"	c
R	Astro8-Emulator/color.hpp	/^    template<typename T> using R = colorful<bar<T>>;$/;"	t	namespace:dye	typeref:typename:colorful<bar<T>>
REED	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch REED = [](double freq, double time) {$/;"	v	namespace:VSSynth::Patches	typeref:typename:const Patch
REED_ENVELOPE	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const ADSREnvelope REED_ENVELOPE(0.90f, 0.30f, 0.1f, 0.1f, 0.05f);$/;"	v	namespace:VSSynth::Patches	typeref:typename:const ADSREnvelope
RELEASE	Astro8-Emulator/VSSynth/utils/Envelope.h	/^            RELEASE,$/;"	e	enum:VSSynth::Envelope::Curves
RM	Astro8-Emulator/linux-build/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
Release	Astro8-Emulator/audio.h	/^	enum class EnvelopeGeneratorState { Off, Attack, Decay, Sustain, Release };$/;"	e	enum:Hyper_BandCHIP::EnvelopeGeneratorState
ReplaceEscapeSymbols	Astro8-Emulator/strops.cpp	/^std::string ReplaceEscapeSymbols(std::string s)$/;"	f	typeref:typename:std::string
Reset	Astro8-Emulator/audio.h	/^		void Reset(unsigned char voice = 0)$/;"	f	class:Hyper_BandCHIP::SampleAudio	typeref:typename:void
ResizeBitmap	ResourceGenerator/Program.cs	/^    static Bitmap ResizeBitmap(Bitmap sourceBMP, int width, int height)$/;"	m	class:Program	file:
S	Astro8-Emulator/color.hpp	/^    template<typename T> using S = item<bar<T>>;$/;"	t	namespace:dye	typeref:typename:item<bar<T>>
SDL2_MIXER_INCLUDE_DIRS	Astro8-Emulator/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_INCLUDE_DIRS ${SDL2_MIXER_INCLUDE_DIR})$/;"	v
SDL2_MIXER_INCLUDE_DIRS	Astro8-Emulator/cmake/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_INCLUDE_DIRS ${SDL2_MIXER_INCLUDE_DIR})$/;"	v
SDL2_MIXER_INCLUDE_DIRS	Astro8-Emulator/linux-build/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_INCLUDE_DIRS ${SDL2_MIXER_INCLUDE_DIR})$/;"	v
SDL2_MIXER_LIBRARIES	Astro8-Emulator/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_LIBRARIES ${SDL2_MIXER_LIBRARY})$/;"	v
SDL2_MIXER_LIBRARIES	Astro8-Emulator/cmake/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_LIBRARIES ${SDL2_MIXER_LIBRARY})$/;"	v
SDL2_MIXER_LIBRARIES	Astro8-Emulator/linux-build/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_LIBRARIES ${SDL2_MIXER_LIBRARY})$/;"	v
SDL2_MIXER_NO_DEFAULT_PATH	Astro8-Emulator/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_NO_DEFAULT_PATH ${_SDL2_MIXER_NO_DEFAULT_PATH}$/;"	v
SDL2_MIXER_NO_DEFAULT_PATH	Astro8-Emulator/cmake/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_NO_DEFAULT_PATH ${_SDL2_MIXER_NO_DEFAULT_PATH}$/;"	v
SDL2_MIXER_NO_DEFAULT_PATH	Astro8-Emulator/linux-build/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_NO_DEFAULT_PATH ${_SDL2_MIXER_NO_DEFAULT_PATH}$/;"	v
SDL2_MIXER_NO_DEFAULT_PATH_CMD	Astro8-Emulator/FindSDL2_mixer.cmake	/^  set(SDL2_MIXER_NO_DEFAULT_PATH_CMD NO_DEFAULT_PATH)$/;"	v
SDL2_MIXER_NO_DEFAULT_PATH_CMD	Astro8-Emulator/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_NO_DEFAULT_PATH_CMD)$/;"	v
SDL2_MIXER_NO_DEFAULT_PATH_CMD	Astro8-Emulator/cmake/FindSDL2_mixer.cmake	/^  set(SDL2_MIXER_NO_DEFAULT_PATH_CMD NO_DEFAULT_PATH)$/;"	v
SDL2_MIXER_NO_DEFAULT_PATH_CMD	Astro8-Emulator/cmake/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_NO_DEFAULT_PATH_CMD)$/;"	v
SDL2_MIXER_NO_DEFAULT_PATH_CMD	Astro8-Emulator/linux-build/FindSDL2_mixer.cmake	/^  set(SDL2_MIXER_NO_DEFAULT_PATH_CMD NO_DEFAULT_PATH)$/;"	v
SDL2_MIXER_NO_DEFAULT_PATH_CMD	Astro8-Emulator/linux-build/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_NO_DEFAULT_PATH_CMD)$/;"	v
SDL2_MIXER_PATH	Astro8-Emulator/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_PATH "" CACHE STRING "Custom SDL2_mixer Library path")$/;"	v
SDL2_MIXER_PATH	Astro8-Emulator/cmake/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_PATH "" CACHE STRING "Custom SDL2_mixer Library path")$/;"	v
SDL2_MIXER_PATH	Astro8-Emulator/linux-build/FindSDL2_mixer.cmake	/^set(SDL2_MIXER_PATH "" CACHE STRING "Custom SDL2_mixer Library path")$/;"	v
SDL2_MIXER_SDL2_NOT_FOUND	Astro8-Emulator/FindSDL2_mixer.cmake	/^  set(SDL2_MIXER_SDL2_NOT_FOUND "Could NOT find SDL2 (SDL2 is required by SDL2_mixer).")$/;"	v
SDL2_MIXER_SDL2_NOT_FOUND	Astro8-Emulator/cmake/FindSDL2_mixer.cmake	/^  set(SDL2_MIXER_SDL2_NOT_FOUND "Could NOT find SDL2 (SDL2 is required by SDL2_mixer).")$/;"	v
SDL2_MIXER_SDL2_NOT_FOUND	Astro8-Emulator/linux-build/FindSDL2_mixer.cmake	/^  set(SDL2_MIXER_SDL2_NOT_FOUND "Could NOT find SDL2 (SDL2 is required by SDL2_mixer).")$/;"	v
SDL2_MIXER_VERSION_STRING	Astro8-Emulator/FindSDL2_mixer.cmake	/^  set(SDL2_MIXER_VERSION_STRING ${SDL2_MIXER_VERSION_MAJOR}.${SDL2_MIXER_VERSION_MINOR}.${SDL2_M/;"	v
SDL2_MIXER_VERSION_STRING	Astro8-Emulator/cmake/FindSDL2_mixer.cmake	/^  set(SDL2_MIXER_VERSION_STRING ${SDL2_MIXER_VERSION_MAJOR}.${SDL2_MIXER_VERSION_MINOR}.${SDL2_M/;"	v
SDL2_MIXER_VERSION_STRING	Astro8-Emulator/linux-build/FindSDL2_mixer.cmake	/^  set(SDL2_MIXER_VERSION_STRING ${SDL2_MIXER_VERSION_MAJOR}.${SDL2_MIXER_VERSION_MINOR}.${SDL2_M/;"	v
SHELL	Astro8-Emulator/linux-build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUSTAIN	Astro8-Emulator/VSSynth/utils/Envelope.h	/^            SUSTAIN,$/;"	e	enum:VSSynth::Envelope::Curves
SampleAudio	Astro8-Emulator/audio.h	/^		SampleAudio() : processing(true)$/;"	f	class:Hyper_BandCHIP::SampleAudio
SampleAudio	Astro8-Emulator/audio.h	/^	class SampleAudio$/;"	c	namespace:Hyper_BandCHIP
Sequencer	Astro8-Emulator/VSSynth/generators/Sequencer.h	/^        class Sequencer : public SoundGenerator$/;"	c	namespace:VSSynth::Generators
SetChannelOutput	Astro8-Emulator/audio.h	/^		void SetChannelOutput(unsigned char channel_mask, unsigned char voice)$/;"	f	class:Hyper_BandCHIP::SampleAudio	typeref:typename:void
SetPlaybackRate	Astro8-Emulator/audio.h	/^		void SetPlaybackRate(unsigned char rate, unsigned char voice = 0)$/;"	f	class:Hyper_BandCHIP::SampleAudio	typeref:typename:void
SetVolume	Astro8-Emulator/audio.h	/^		void SetVolume(unsigned char volume, unsigned char voice)$/;"	f	class:Hyper_BandCHIP::SampleAudio	typeref:typename:void
SimpleCapParams	Astro8-Emulator/escapi.h	/^struct SimpleCapParams$/;"	s
SoundGenerator	Astro8-Emulator/VSSynth/SoundGenerator.h	/^    class SoundGenerator$/;"	c	namespace:VSSynth
SplitGetLastAfterChar	Astro8-Emulator/strops.cpp	/^std::string SplitGetLastAfterChar(const std::string& str, std::string delim)$/;"	f	typeref:typename:std::string
SplitString	Astro8-Emulator/strops.cpp	/^std::vector<std::string> SplitString(std::string& str, std::string delim)$/;"	f	typeref:typename:std::vector<std::string>
StringContains	Astro8-Emulator/strops.cpp	/^bool StringContains(std::string& str, char check)$/;"	f	typeref:typename:bool
StringContains	Astro8-Emulator/strops.cpp	/^bool StringContains(std::string& str, std::string check)$/;"	f	typeref:typename:bool
StringStartsWith	Astro8-Emulator/strops.cpp	/^bool StringStartsWith(std::string str, std::string substr)$/;"	f	typeref:typename:bool
Sustain	Astro8-Emulator/audio.h	/^	enum class EnvelopeGeneratorState { Off, Attack, Decay, Sustain, Release };$/;"	e	enum:Hyper_BandCHIP::EnvelopeGeneratorState
SynthData	Astro8-Emulator/VSSynth/Synthesizer.h	/^    struct SynthData$/;"	s	namespace:VSSynth
SynthMiddleware	Astro8-Emulator/VSSynth/SynthMiddleware.h	/^    class SynthMiddleware$/;"	c	namespace:VSSynth
Synthesizer	Astro8-Emulator/VSSynth/Synthesizer.h	/^    class Synthesizer$/;"	c	namespace:VSSynth
ToLower	Astro8-Emulator/strops.cpp	/^std::string ToLower(std::string s)$/;"	f	typeref:typename:std::string
ToUpper	Astro8-Emulator/strops.cpp	/^std::string ToUpper(std::string s)$/;"	f	typeref:typename:std::string
Tone	Astro8-Emulator/VSSynth/generators/Tone.h	/^        class Tone : public SoundGenerator$/;"	c	namespace:VSSynth::Generators
TrimString	Astro8-Emulator/strops.cpp	/^std::string TrimString(std::string s)$/;"	f	typeref:typename:std::string
UNIX	Astro8-Emulator/colorprint.h	/^	#define UNIX /;"	d
VC_LIB_PATH_SUFFIX	Astro8-Emulator/FindSDL2_mixer.cmake	/^  set(VC_LIB_PATH_SUFFIX lib\/x64)$/;"	v
VC_LIB_PATH_SUFFIX	Astro8-Emulator/FindSDL2_mixer.cmake	/^  set(VC_LIB_PATH_SUFFIX lib\/x86)$/;"	v
VC_LIB_PATH_SUFFIX	Astro8-Emulator/cmake/FindSDL2_mixer.cmake	/^  set(VC_LIB_PATH_SUFFIX lib\/x64)$/;"	v
VC_LIB_PATH_SUFFIX	Astro8-Emulator/cmake/FindSDL2_mixer.cmake	/^  set(VC_LIB_PATH_SUFFIX lib\/x86)$/;"	v
VC_LIB_PATH_SUFFIX	Astro8-Emulator/linux-build/FindSDL2_mixer.cmake	/^  set(VC_LIB_PATH_SUFFIX lib\/x64)$/;"	v
VC_LIB_PATH_SUFFIX	Astro8-Emulator/linux-build/FindSDL2_mixer.cmake	/^  set(VC_LIB_PATH_SUFFIX lib\/x86)$/;"	v
VSSynth	Astro8-Emulator/VSSynth/SoundGenerator.h	/^namespace VSSynth$/;"	n
VSSynth	Astro8-Emulator/VSSynth/SynthMiddleware.h	/^namespace VSSynth$/;"	n
VSSynth	Astro8-Emulator/VSSynth/Synthesizer.h	/^namespace VSSynth$/;"	n
VSSynth	Astro8-Emulator/VSSynth/generators/Instrument.h	/^namespace VSSynth$/;"	n
VSSynth	Astro8-Emulator/VSSynth/generators/MonophonicInstrument.h	/^namespace VSSynth$/;"	n
VSSynth	Astro8-Emulator/VSSynth/generators/PolyphonicInstrument.h	/^namespace VSSynth$/;"	n
VSSynth	Astro8-Emulator/VSSynth/generators/Sequencer.h	/^namespace VSSynth$/;"	n
VSSynth	Astro8-Emulator/VSSynth/generators/Tone.h	/^namespace VSSynth$/;"	n
VSSynth	Astro8-Emulator/VSSynth/middleware/WAVWriter.h	/^namespace VSSynth$/;"	n
VSSynth	Astro8-Emulator/VSSynth/utils/Envelope.h	/^namespace VSSynth$/;"	n
VSSynth	Astro8-Emulator/VSSynth/utils/Notes.h	/^namespace VSSynth$/;"	n
VSSynth	Astro8-Emulator/VSSynth/utils/Patches.h	/^namespace VSSynth$/;"	n
VSSynth	Astro8-Emulator/VSSynth/utils/Waveforms.h	/^namespace VSSynth$/;"	n
WAVWriter	Astro8-Emulator/VSSynth/middleware/WAVWriter.h	/^        class WAVWriter : public SynthMiddleware$/;"	c	namespace:VSSynth::Middleware
WINDOWS	Astro8-Emulator/colorprint.h	/^	#define WINDOWS /;"	d
Waveforms	Astro8-Emulator/VSSynth/utils/Waveforms.h	/^    namespace Waveforms$/;"	n	namespace:VSSynth
_APS_NEXT_COMMAND_VALUE	Astro8-Emulator/resource.h	/^#define _APS_NEXT_COMMAND_VALUE /;"	d
_APS_NEXT_CONTROL_VALUE	Astro8-Emulator/resource.h	/^#define _APS_NEXT_CONTROL_VALUE /;"	d
_APS_NEXT_RESOURCE_VALUE	Astro8-Emulator/resource.h	/^#define _APS_NEXT_RESOURCE_VALUE /;"	d
_APS_NEXT_SYMED_VALUE	Astro8-Emulator/resource.h	/^#define _APS_NEXT_SYMED_VALUE /;"	d
_AUDIO_H_	Astro8-Emulator/audio.h	/^#define _AUDIO_H_$/;"	d
_SDL2_MIXER_NO_DEFAULT_PATH	Astro8-Emulator/FindSDL2_mixer.cmake	/^  set(_SDL2_MIXER_NO_DEFAULT_PATH ON)$/;"	v
_SDL2_MIXER_NO_DEFAULT_PATH	Astro8-Emulator/FindSDL2_mixer.cmake	/^set(_SDL2_MIXER_NO_DEFAULT_PATH OFF)$/;"	v
_SDL2_MIXER_NO_DEFAULT_PATH	Astro8-Emulator/cmake/FindSDL2_mixer.cmake	/^  set(_SDL2_MIXER_NO_DEFAULT_PATH ON)$/;"	v
_SDL2_MIXER_NO_DEFAULT_PATH	Astro8-Emulator/cmake/FindSDL2_mixer.cmake	/^set(_SDL2_MIXER_NO_DEFAULT_PATH OFF)$/;"	v
_SDL2_MIXER_NO_DEFAULT_PATH	Astro8-Emulator/linux-build/FindSDL2_mixer.cmake	/^  set(_SDL2_MIXER_NO_DEFAULT_PATH ON)$/;"	v
_SDL2_MIXER_NO_DEFAULT_PATH	Astro8-Emulator/linux-build/FindSDL2_mixer.cmake	/^set(_SDL2_MIXER_NO_DEFAULT_PATH OFF)$/;"	v
__anon05a9cb200102	Astro8-Emulator/color.hpp	/^            {$/;"	f	function:hue::stoc	file:
__anon5f040b730108	Astro8-Emulator/audio.h	/^		{$/;"	s	class:Hyper_BandCHIP::SampleAudio
__anon7c6d03de0102	Astro8-Emulator/processing.h	/^	auto isEmptyOrBlank = [](const std::string& s) {$/;"	f	function:PreProcess	file:
__anon7c6d03de0202	Astro8-Emulator/processing.h	/^	auto isComment = [](const std::string& s) {$/;"	f	function:PreProcess	file:
__anon7dac1c170102	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch BASS = [](double freq, double time) {$/;"	f	namespace:VSSynth::Patches	file:
__anon7dac1c170202	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch BRASS = [](double freq, double time) {$/;"	f	namespace:VSSynth::Patches	file:
__anon7dac1c170302	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch CYMBAL = [](double freq, double time) {$/;"	f	namespace:VSSynth::Patches	file:
__anon7dac1c170402	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch GLOCKENSPIEL = [](double freq, double time) {$/;"	f	namespace:VSSynth::Patches	file:
__anon7dac1c170502	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch GUITAR = [](double freq, double time) {$/;"	f	namespace:VSSynth::Patches	file:
__anon7dac1c170602	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch ORGAN = [](double freq, double time) {$/;"	f	namespace:VSSynth::Patches	file:
__anon7dac1c170702	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch PIANO = [](double freq, double time) {$/;"	f	namespace:VSSynth::Patches	file:
__anon7dac1c170802	Astro8-Emulator/VSSynth/utils/Patches.h	/^        const Patch REED = [](double freq, double time) {$/;"	f	namespace:VSSynth::Patches	file:
__anoncb9bb8270102	Astro8-Emulator/strops.cpp	/^	s.erase(s.begin(), std::find_if(s.begin(), s.end(), [](unsigned char ch) {$/;"	f	function:ltrim	file:
__anoncb9bb8270202	Astro8-Emulator/strops.cpp	/^	s.erase(std::find_if(s.rbegin(), s.rend(), [](unsigned char ch) {$/;"	f	function:rtrim	file:
action	ResourceGenerator/Program.cs	/^    static string action = "";$/;"	f	class:Program	file:
add	example_armstrong_programs/pong.armstrong.asm	/^add$/;"	l
addOneToHexStr	Astro8-Emulator/strops.cpp	/^void addOneToHexStr(char* num, int len)$/;"	f	typeref:typename:void
addOneToHexStrInRange	Astro8-Emulator/strops.cpp	/^void addOneToHexStrInRange(char* num, int start, int len)$/;"	f	typeref:typename:void
all	Astro8-Emulator/linux-build/Makefile	/^all: cmake_check_build_system$/;"	t
and	example_armstrong_programs/pong.armstrong.asm	/^and$/;"	l
aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua(std::ostream& os) { set_text("a");          return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua(T t) { return R<T> { S<T>(t, "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_aqua(std::ostream& os) { set("a", "a");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_aqua(T t) { return R<T> { S<T>(t, "a", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_black(std::ostream& os) { set("a", "k");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_black(T t) { return R<T> { S<T>(t, "a", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_blue(std::ostream& os) { set("a", "b");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_blue(T t) { return R<T> { S<T>(t, "a", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_bright_white(std::ostream& os) { set("a", "bw");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_bright_white(T t) { return R<T> { S<T>(t, "a", "bw") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_green(std::ostream& os) { set("a", "g");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_green(T t) { return R<T> { S<T>(t, "a", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_grey(std::ostream& os) { set("a", "e");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_grey(T t) { return R<T> { S<T>(t, "a", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_light_aqua(std::ostream& os) { set("a", "la");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_light_aqua(T t) { return R<T> { S<T>(t, "a", "la") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_light_blue(std::ostream& os) { set("a", "lb");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_light_blue(T t) { return R<T> { S<T>(t, "a", "lb") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_light_green(std::ostream& os) { set("a", "lg");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_light_green(T t) { return R<T> { S<T>(t, "a", "lg") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_light_purple(std::ostream& os) { set("a", "lp");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_light_purple(T t) { return R<T> { S<T>(t, "a", "lp") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_light_red(std::ostream& os) { set("a", "lr");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_light_red(T t) { return R<T> { S<T>(t, "a", "lr") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_light_yellow(std::ostream& os) { set("a", "ly");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_light_yellow(T t) { return R<T> { S<T>(t, "a", "ly") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_purple(std::ostream& os) { set("a", "p");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_purple(T t) { return R<T> { S<T>(t, "a", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_red(std::ostream& os) { set("a", "r");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_red(T t) { return R<T> { S<T>(t, "a", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_white(std::ostream& os) { set("a", "w");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_white(T t) { return R<T> { S<T>(t, "a", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
aqua_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& aqua_on_yellow(std::ostream& os) { set("a", "y");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
aqua_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> aqua_on_yellow(T t) { return R<T> { S<T>(t, "a", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
astro8	Astro8-Emulator/CMakeLists.txt	/^add_executable (astro8 main.cpp color.hpp colorprint.h processing.h armstrong-compiler.h strops./;"	t
astro8	Astro8-Emulator/CMakeLists.txt	/^project(astro8)$/;"	p
astro8	Astro8-Emulator/linux-build/Makefile	/^astro8: cmake_check_build_system$/;"	t
astro8/fast	Astro8-Emulator/linux-build/Makefile	/^astro8\/fast:$/;"	t
attack	Astro8-Emulator/VSSynth/utils/Envelope.h	/^        double attack, sustain;                    \/\/ Amplitudes$/;"	m	struct:VSSynth::ADSREnvelope	typeref:typename:double
attackTime	Astro8-Emulator/VSSynth/utils/Envelope.h	/^        double attackTime, decayTime, releaseTime; \/\/ Time-lengths$/;"	m	struct:VSSynth::ADSREnvelope	typeref:typename:double
attack_time	Astro8-Emulator/audio.h	/^		double attack_time;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:double
audio_buffer	Astro8-Emulator/audio.h	/^			std::array<unsigned char, 16> audio_buffer;$/;"	m	struct:Hyper_BandCHIP::SampleAudio::__anon5f040b730108	typeref:typename:std::array<unsigned char,16>
audio_spec	Astro8-Emulator/audio.h	/^		SDL_AudioSpec audio_spec;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:SDL_AudioSpec
audio_spec	Astro8-Emulator/audio.h	/^		SDL_AudioSpec audio_spec;$/;"	m	class:Hyper_BandCHIP::SampleAudio	typeref:typename:SDL_AudioSpec
b_offset	Astro8-Emulator/audio.h	/^			unsigned char b_offset;$/;"	m	struct:Hyper_BandCHIP::SampleAudio::__anon5f040b730108	typeref:typename:unsigned char
bar	Astro8-Emulator/color.hpp	/^    using bar = typename std::conditional<std::is_same<T, const char*>::value, std::string, T>::/;"	t	namespace:dye	typeref:typename:std::conditional<std::is_same<T,const char * >::value,std::string,T>::type
black	Astro8-Emulator/color.hpp	/^    static std::ostream& black(std::ostream& os) { set_text("k");          return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black(T t) { return R<T> { S<T>(t, "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blackBGColor	Astro8-Emulator/colorprint.h	/^static const std::string blackBGColor = "\\x1B[40m";$/;"	v	typeref:typename:const std::string
blackFGColor	Astro8-Emulator/colorprint.h	/^static const std::string blackFGColor = "\\x1B[30m";$/;"	v	typeref:typename:const std::string
black_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_aqua(std::ostream& os) { set("k", "a");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_aqua(T t) { return R<T> { S<T>(t, "k", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_black(std::ostream& os) { set("k", "k");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_black(T t) { return R<T> { S<T>(t, "k", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_blue(std::ostream& os) { set("k", "b");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_blue(T t) { return R<T> { S<T>(t, "k", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_bright_white(std::ostream& os) { set("k", "bw");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_bright_white(T t) { return R<T> { S<T>(t, "k", "bw") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_green(std::ostream& os) { set("k", "g");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_green(T t) { return R<T> { S<T>(t, "k", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_grey(std::ostream& os) { set("k", "e");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_grey(T t) { return R<T> { S<T>(t, "k", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_light_aqua(std::ostream& os) { set("k", "la");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_light_aqua(T t) { return R<T> { S<T>(t, "k", "la") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_light_blue(std::ostream& os) { set("k", "lb");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_light_blue(T t) { return R<T> { S<T>(t, "k", "lb") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_light_green(std::ostream& os) { set("k", "lg");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_light_green(T t) { return R<T> { S<T>(t, "k", "lg") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_light_purple(std::ostream& os) { set("k", "lp");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_light_purple(T t) { return R<T> { S<T>(t, "k", "lp") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_light_red(std::ostream& os) { set("k", "lr");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_light_red(T t) { return R<T> { S<T>(t, "k", "lr") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_light_yellow(std::ostream& os) { set("k", "ly");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_light_yellow(T t) { return R<T> { S<T>(t, "k", "ly") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_purple(std::ostream& os) { set("k", "p");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_purple(T t) { return R<T> { S<T>(t, "k", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_red(std::ostream& os) { set("k", "r");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_red(T t) { return R<T> { S<T>(t, "k", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_white(std::ostream& os) { set("k", "w");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_white(T t) { return R<T> { S<T>(t, "k", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
black_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& black_on_yellow(std::ostream& os) { set("k", "y");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
black_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> black_on_yellow(T t) { return R<T> { S<T>(t, "k", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue	Astro8-Emulator/color.hpp	/^    static std::ostream& blue(std::ostream& os) { set_text("b");          return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue(T t) { return R<T> { S<T>(t, "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blueBGColor	Astro8-Emulator/colorprint.h	/^static const std::string blueBGColor = "\\x1B[44m";$/;"	v	typeref:typename:const std::string
blueFGColor	Astro8-Emulator/colorprint.h	/^static const std::string blueFGColor = "\\x1B[34m";$/;"	v	typeref:typename:const std::string
blue_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_aqua(std::ostream& os) { set("b", "a");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_aqua(T t) { return R<T> { S<T>(t, "b", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_black(std::ostream& os) { set("b", "k");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_black(T t) { return R<T> { S<T>(t, "b", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_blue(std::ostream& os) { set("b", "b");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_blue(T t) { return R<T> { S<T>(t, "b", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_bright_white(std::ostream& os) { set("b", "bw");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_bright_white(T t) { return R<T> { S<T>(t, "b", "bw") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_green(std::ostream& os) { set("b", "g");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_green(T t) { return R<T> { S<T>(t, "b", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_grey(std::ostream& os) { set("b", "e");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_grey(T t) { return R<T> { S<T>(t, "b", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_light_aqua(std::ostream& os) { set("b", "la");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_light_aqua(T t) { return R<T> { S<T>(t, "b", "la") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_light_blue(std::ostream& os) { set("b", "lb");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_light_blue(T t) { return R<T> { S<T>(t, "b", "lb") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_light_green(std::ostream& os) { set("b", "lg");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_light_green(T t) { return R<T> { S<T>(t, "b", "lg") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_light_purple(std::ostream& os) { set("b", "lp");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_light_purple(T t) { return R<T> { S<T>(t, "b", "lp") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_light_red(std::ostream& os) { set("b", "lr");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_light_red(T t) { return R<T> { S<T>(t, "b", "lr") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_light_yellow(std::ostream& os) { set("b", "ly");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_light_yellow(T t) { return R<T> { S<T>(t, "b", "ly") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_purple(std::ostream& os) { set("b", "p");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_purple(T t) { return R<T> { S<T>(t, "b", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_red(std::ostream& os) { set("b", "r");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_red(T t) { return R<T> { S<T>(t, "b", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_white(std::ostream& os) { set("b", "w");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_white(T t) { return R<T> { S<T>(t, "b", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
blue_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& blue_on_yellow(std::ostream& os) { set("b", "y");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
blue_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> blue_on_yellow(T t) { return R<T> { S<T>(t, "b", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
bnk	example_armstrong_programs/pong.armstrong.asm	/^bnk 0$/;"	l
bnk	example_armstrong_programs/pong.armstrong.asm	/^bnk 1$/;"	l
brightBlackBGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightBlackBGColor = "\\x1B[100m";$/;"	v	typeref:typename:const std::string
brightBlackFGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightBlackFGColor = "\\x1B[90m";$/;"	v	typeref:typename:const std::string
brightBlueBGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightBlueBGColor = "\\x1B[104m";$/;"	v	typeref:typename:const std::string
brightBlueFGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightBlueFGColor = "\\x1B[94m";$/;"	v	typeref:typename:const std::string
brightCyanBGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightCyanBGColor = "\\x1B[106m";$/;"	v	typeref:typename:const std::string
brightCyanFGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightCyanFGColor = "\\x1B[96m";$/;"	v	typeref:typename:const std::string
brightGreenBGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightGreenBGColor = "\\x1B[102m";$/;"	v	typeref:typename:const std::string
brightGreenFGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightGreenFGColor = "\\x1B[92m";$/;"	v	typeref:typename:const std::string
brightMagentaBGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightMagentaBGColor = "\\x1B[105m";$/;"	v	typeref:typename:const std::string
brightMagentaFGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightMagentaFGColor = "\\x1B[95m";$/;"	v	typeref:typename:const std::string
brightRedBGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightRedBGColor = "\\x1B[101m";$/;"	v	typeref:typename:const std::string
brightRedFGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightRedFGColor = "\\x1B[91m";$/;"	v	typeref:typename:const std::string
brightWhiteBGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightWhiteBGColor = "\\x1B[107m";$/;"	v	typeref:typename:const std::string
brightWhiteFGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightWhiteFGColor = "\\x1B[97m";$/;"	v	typeref:typename:const std::string
brightYellowBGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightYellowBGColor = "\\x1B[103m";$/;"	v	typeref:typename:const std::string
brightYellowFGColor	Astro8-Emulator/colorprint.h	/^static const std::string brightYellowFGColor = "\\x1B[93m";$/;"	v	typeref:typename:const std::string
bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white(std::ostream& os) { set_text("bw");         return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white(T t) { return R<T> { S<T>(t, "bw") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_aqua(std::ostream& os) { set("bw", "a");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_aqua(T t) { return R<T> { S<T>(t, "bw", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_black(std::ostream& os) { set("bw", "k");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_black(T t) { return R<T> { S<T>(t, "bw", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_blue(std::ostream& os) { set("bw", "b");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_blue(T t) { return R<T> { S<T>(t, "bw", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_bright_white(std::ostream& os) { set("bw", "bw"); retur/;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_bright_white(T t) { return R<T> { S<T>(t, "bw", "b/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_green(std::ostream& os) { set("bw", "g");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_green(T t) { return R<T> { S<T>(t, "bw", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_grey(std::ostream& os) { set("bw", "e");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_grey(T t) { return R<T> { S<T>(t, "bw", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_light_aqua(std::ostream& os) { set("bw", "la"); return /;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_light_aqua(T t) { return R<T> { S<T>(t, "bw", "la"/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_light_blue(std::ostream& os) { set("bw", "lb"); return /;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_light_blue(T t) { return R<T> { S<T>(t, "bw", "lb"/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_light_green(std::ostream& os) { set("bw", "lg"); return/;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_light_green(T t) { return R<T> { S<T>(t, "bw", "lg/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_light_purple(std::ostream& os) { set("bw", "lp"); retur/;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_light_purple(T t) { return R<T> { S<T>(t, "bw", "l/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_light_red(std::ostream& os) { set("bw", "lr"); return o/;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_light_red(T t) { return R<T> { S<T>(t, "bw", "lr")/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_light_yellow(std::ostream& os) { set("bw", "ly"); retur/;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_light_yellow(T t) { return R<T> { S<T>(t, "bw", "l/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_purple(std::ostream& os) { set("bw", "p");  return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_purple(T t) { return R<T> { S<T>(t, "bw", "p") }; /;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_red(std::ostream& os) { set("bw", "r");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_red(T t) { return R<T> { S<T>(t, "bw", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_white(std::ostream& os) { set("bw", "w");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_white(T t) { return R<T> { S<T>(t, "bw", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
bright_white_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& bright_white_on_yellow(std::ostream& os) { set("bw", "y");  return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
bright_white_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> bright_white_on_yellow(T t) { return R<T> { S<T>(t, "bw", "y") }; /;"	f	namespace:dye	typeref:typename:R<T>
cConcatInt	Astro8-Emulator/strops.cpp	/^void cConcatInt(char* arr, char* outArr, int len, int x)$/;"	f	typeref:typename:void
channel_output	Astro8-Emulator/audio.h	/^			std::array<bool, channels> channel_output;$/;"	m	struct:Hyper_BandCHIP::SampleAudio::__anon5f040b730108	typeref:typename:std::array<bool,channels>
clampf	Astro8-Emulator/strops.cpp	/^float clampf(float x, float min, float max)$/;"	f	typeref:typename:float
clean	Astro8-Emulator/linux-build/Makefile	/^clean:$/;"	t
clean/fast	Astro8-Emulator/linux-build/Makefile	/^clean\/fast: clean$/;"	t
cmake_check_build_system	Astro8-Emulator/linux-build/Makefile	/^cmake_check_build_system:$/;"	t
cmake_force	Astro8-Emulator/linux-build/Makefile	/^cmake_force:$/;"	t
color	Astro8-Emulator/color.hpp	/^        int color;$/;"	m	class:dye::item	typeref:typename:int
colorful	Astro8-Emulator/color.hpp	/^    class colorful : private std::list<item<T>>$/;"	c	namespace:dye
colorize	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> colorize(T t, std::string a) { return R<T> { S<T>(t, a) }; }$/;"	f	namespace:dye	typeref:typename:R<T>
const	example_armstrong_programs/stack.arm.asm	/^const @__CHAR_MEM_ADDR__ 53546$/;"	l
const	example_armstrong_programs/stack.arm.asm	/^const @__PIXEL_MEM_ADDR__ 53870$/;"	l
countCaptureDevices	Astro8-Emulator/escapi.cpp	/^countCaptureDevicesProc countCaptureDevices;$/;"	v	typeref:typename:countCaptureDevicesProc
countCaptureDevicesProc	Astro8-Emulator/escapi.h	/^typedef int (*countCaptureDevicesProc)();$/;"	t	typeref:typename:int (*)()
csubstr	Astro8-Emulator/strops.cpp	/^void csubstr(char* arr, char* outArr, int begin, int len, int totalLen, int& actualSize)$/;"	f	typeref:typename:void
ctos	Astro8-Emulator/color.hpp	/^    static std::string ctos(int c)$/;"	f	namespace:hue	typeref:typename:std::string
current_level	Astro8-Emulator/audio.h	/^		double current_level;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:double
current_period	Astro8-Emulator/audio.h	/^		double current_period;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:double
current_state_time	Astro8-Emulator/audio.h	/^		double current_state_time;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:double
cyanBGColor	Astro8-Emulator/colorprint.h	/^static const std::string cyanBGColor = "\\x1B[46m";$/;"	v	typeref:typename:const std::string
cyanFGColor	Astro8-Emulator/colorprint.h	/^static const std::string cyanFGColor = "\\x1B[36m";$/;"	v	typeref:typename:const std::string
d	Astro8-Emulator/strops.cpp	/^char d[30];	 \/\/ Buffer for the CharStrStartsWith() function check$/;"	v	typeref:typename:char[30]
decayTime	Astro8-Emulator/VSSynth/utils/Envelope.h	/^        double attackTime, decayTime, releaseTime; \/\/ Time-lengths$/;"	m	struct:VSSynth::ADSREnvelope	typeref:typename:double
decay_time	Astro8-Emulator/audio.h	/^		double decay_time;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:double
default_target	Astro8-Emulator/linux-build/Makefile	/^default_target: all$/;"	t
deinitCapture	Astro8-Emulator/escapi.cpp	/^deinitCaptureProc deinitCapture;$/;"	v	typeref:typename:deinitCaptureProc
deinitCaptureProc	Astro8-Emulator/escapi.h	/^typedef void (*deinitCaptureProc)(unsigned int deviceno);$/;"	t	typeref:typename:void (*)(unsigned int deviceno)
depend	Astro8-Emulator/linux-build/Makefile	/^depend:$/;"	t
divideHexByFloat	Astro8-Emulator/strops.cpp	/^std::string divideHexByFloat(const std::string& hexNumber, float divisor)$/;"	f	typeref:typename:std::string
doCapture	Astro8-Emulator/escapi.cpp	/^doCaptureProc doCapture;$/;"	v	typeref:typename:doCaptureProc
doCaptureProc	Astro8-Emulator/escapi.h	/^typedef void (*doCaptureProc)(unsigned int deviceno);$/;"	t	typeref:typename:void (*)(unsigned int deviceno)
dye	Astro8-Emulator/color.hpp	/^namespace dye$/;"	n
edit_cache	Astro8-Emulator/linux-build/Makefile	/^edit_cache:$/;"	t
edit_cache/fast	Astro8-Emulator/linux-build/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
egs_accumulator	Astro8-Emulator/audio.h	/^		double egs_accumulator;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:double
egs_tp	Astro8-Emulator/audio.h	/^		high_resolution_clock::time_point egs_tp;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:high_resolution_clock::time_point
frequency	Astro8-Emulator/audio.h	/^		double frequency;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:double
get	Astro8-Emulator/color.hpp	/^    static int get()$/;"	f	namespace:hue	typeref:typename:int
getCaptureDeviceName	Astro8-Emulator/escapi.cpp	/^getCaptureDeviceNameProc getCaptureDeviceName;$/;"	v	typeref:typename:getCaptureDeviceNameProc
getCaptureDeviceNameProc	Astro8-Emulator/escapi.h	/^typedef void (*getCaptureDeviceNameProc)(unsigned int deviceno, char *namebuffer, int bufferleng/;"	t	typeref:typename:void (*)(unsigned int deviceno,char * namebuffer,int bufferlength)
getCaptureErrorCode	Astro8-Emulator/escapi.cpp	/^getCaptureErrorCodeProc getCaptureErrorCode;$/;"	v	typeref:typename:getCaptureErrorCodeProc
getCaptureErrorCodeProc	Astro8-Emulator/escapi.h	/^typedef int (*getCaptureErrorCodeProc)(unsigned int deviceno);$/;"	t	typeref:typename:int (*)(unsigned int deviceno)
getCaptureErrorLine	Astro8-Emulator/escapi.cpp	/^getCaptureErrorLineProc getCaptureErrorLine;$/;"	v	typeref:typename:getCaptureErrorLineProc
getCaptureErrorLineProc	Astro8-Emulator/escapi.h	/^typedef int (*getCaptureErrorLineProc)(unsigned int deviceno);$/;"	t	typeref:typename:int (*)(unsigned int deviceno)
getCapturePropertyAuto	Astro8-Emulator/escapi.cpp	/^getCapturePropertyAutoProc getCapturePropertyAuto;$/;"	v	typeref:typename:getCapturePropertyAutoProc
getCapturePropertyAutoProc	Astro8-Emulator/escapi.h	/^typedef int(*getCapturePropertyAutoProc)(unsigned int deviceno, int prop);$/;"	t	typeref:typename:int (*)(unsigned int deviceno,int prop)
getCapturePropertyValue	Astro8-Emulator/escapi.cpp	/^getCapturePropertyValueProc getCapturePropertyValue;$/;"	v	typeref:typename:getCapturePropertyValueProc
getCapturePropertyValueProc	Astro8-Emulator/escapi.h	/^typedef float (*getCapturePropertyValueProc)(unsigned int deviceno, int prop);$/;"	t	typeref:typename:float (*)(unsigned int deviceno,int prop)
get_background	Astro8-Emulator/color.hpp	/^    static int get_background()$/;"	f	namespace:hue	typeref:typename:int
get_text	Astro8-Emulator/color.hpp	/^    static int get_text()$/;"	f	namespace:hue	typeref:typename:int
green	Astro8-Emulator/color.hpp	/^    static std::ostream& green(std::ostream& os) { set_text("g");          return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green(T t) { return R<T> { S<T>(t, "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
greenBGColor	Astro8-Emulator/colorprint.h	/^static const std::string greenBGColor = "\\x1B[42m";$/;"	v	typeref:typename:const std::string
greenFGColor	Astro8-Emulator/colorprint.h	/^static const std::string greenFGColor = "\\x1B[32m";$/;"	v	typeref:typename:const std::string
green_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_aqua(std::ostream& os) { set("g", "a");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_aqua(T t) { return R<T> { S<T>(t, "g", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_black(std::ostream& os) { set("g", "k");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_black(T t) { return R<T> { S<T>(t, "g", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_blue(std::ostream& os) { set("g", "b");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_blue(T t) { return R<T> { S<T>(t, "g", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_bright_white(std::ostream& os) { set("g", "bw");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_bright_white(T t) { return R<T> { S<T>(t, "g", "bw") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_green(std::ostream& os) { set("g", "g");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_green(T t) { return R<T> { S<T>(t, "g", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_grey(std::ostream& os) { set("g", "e");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_grey(T t) { return R<T> { S<T>(t, "g", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_light_aqua(std::ostream& os) { set("g", "la");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_light_aqua(T t) { return R<T> { S<T>(t, "g", "la") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_light_blue(std::ostream& os) { set("g", "lb");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_light_blue(T t) { return R<T> { S<T>(t, "g", "lb") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_light_green(std::ostream& os) { set("g", "lg");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_light_green(T t) { return R<T> { S<T>(t, "g", "lg") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_light_purple(std::ostream& os) { set("g", "lp");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_light_purple(T t) { return R<T> { S<T>(t, "g", "lp") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_light_red(std::ostream& os) { set("g", "lr");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_light_red(T t) { return R<T> { S<T>(t, "g", "lr") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_light_yellow(std::ostream& os) { set("g", "ly");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_light_yellow(T t) { return R<T> { S<T>(t, "g", "ly") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_purple(std::ostream& os) { set("g", "p");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_purple(T t) { return R<T> { S<T>(t, "g", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_red(std::ostream& os) { set("g", "r");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_red(T t) { return R<T> { S<T>(t, "g", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_white(std::ostream& os) { set("g", "w");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_white(T t) { return R<T> { S<T>(t, "g", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
green_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& green_on_yellow(std::ostream& os) { set("g", "y");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
green_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> green_on_yellow(T t) { return R<T> { S<T>(t, "g", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey	Astro8-Emulator/color.hpp	/^    static std::ostream& grey(std::ostream& os) { set_text("e");          return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey(T t) { return R<T> { S<T>(t, "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_aqua(std::ostream& os) { set("e", "a");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_aqua(T t) { return R<T> { S<T>(t, "e", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_black(std::ostream& os) { set("e", "k");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_black(T t) { return R<T> { S<T>(t, "e", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_blue(std::ostream& os) { set("e", "b");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_blue(T t) { return R<T> { S<T>(t, "e", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_bright_white(std::ostream& os) { set("e", "bw");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_bright_white(T t) { return R<T> { S<T>(t, "e", "bw") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_green(std::ostream& os) { set("e", "g");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_green(T t) { return R<T> { S<T>(t, "e", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_grey(std::ostream& os) { set("e", "e");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_grey(T t) { return R<T> { S<T>(t, "e", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_light_aqua(std::ostream& os) { set("e", "la");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_light_aqua(T t) { return R<T> { S<T>(t, "e", "la") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_light_blue(std::ostream& os) { set("e", "lb");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_light_blue(T t) { return R<T> { S<T>(t, "e", "lb") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_light_green(std::ostream& os) { set("e", "lg");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_light_green(T t) { return R<T> { S<T>(t, "e", "lg") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_light_purple(std::ostream& os) { set("e", "lp");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_light_purple(T t) { return R<T> { S<T>(t, "e", "lp") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_light_red(std::ostream& os) { set("e", "lr");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_light_red(T t) { return R<T> { S<T>(t, "e", "lr") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_light_yellow(std::ostream& os) { set("e", "ly");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_light_yellow(T t) { return R<T> { S<T>(t, "e", "ly") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_purple(std::ostream& os) { set("e", "p");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_purple(T t) { return R<T> { S<T>(t, "e", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_red(std::ostream& os) { set("e", "r");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_red(T t) { return R<T> { S<T>(t, "e", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_white(std::ostream& os) { set("e", "w");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_white(T t) { return R<T> { S<T>(t, "e", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
grey_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& grey_on_yellow(std::ostream& os) { set("e", "y");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
grey_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> grey_on_yellow(T t) { return R<T> { S<T>(t, "e", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
help	Astro8-Emulator/linux-build/Makefile	/^help:$/;"	t
here	example_armstrong_programs/pong.armstrong.asm	/^here 100$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 10000$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 14000$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 145$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 155$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16382$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16383$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16384$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16385$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16386$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16387$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16388$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16389$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16390$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16391$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16392$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16393$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16394$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16395$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16396$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16397$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16398$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16399$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16400$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16401$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16402$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16403$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16404$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16405$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16406$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16407$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16408$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16409$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16410$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16411$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16412$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16413$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16414$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 16415$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 191$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 201$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 204$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 214$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 217$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 235$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 238$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 248$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 251$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 259$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 271$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 279$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 291$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 301$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 311$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 314$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 324$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 327$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 345$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 348$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 358$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 361$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 369$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 381$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 389$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 401$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 453$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 463$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 474$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 480$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 488$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 494$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 502$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 508$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 516$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 522$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 530$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 53546$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 53568$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 53578$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 53871$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 553$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 555$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 563$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 586$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 588$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 596$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 599$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 607$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 610$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 652$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 655$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 65535$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 665$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 699$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 702$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 741$/;"	l
here	example_armstrong_programs/pong.armstrong.asm	/^here 76$/;"	l
here	example_armstrong_programs/stack.arm.asm	/^here #main$/;"	l
here	example_armstrong_programs/stack.arm.asm	/^here 0$/;"	l
hexCharacterToBinary	ResourceGenerator/Program.cs	/^    private static readonly Dictionary<char, string> hexCharacterToBinary = new Dictionary<char,/;"	f	class:Program	file:
hold	Astro8-Emulator/VSSynth/generators/Sequencer.h	/^                bool hold;$/;"	m	struct:VSSynth::Generators::Sequencer::NoteEvent	typeref:typename:bool
hue	Astro8-Emulator/color.hpp	/^namespace hue$/;"	n
initCOM	Astro8-Emulator/escapi.cpp	/^initCOMProc initCOM;$/;"	v	typeref:typename:initCOMProc
initCOMProc	Astro8-Emulator/escapi.cpp	/^typedef void (*initCOMProc)();$/;"	t	typeref:typename:void (*)()	file:
initCapture	Astro8-Emulator/escapi.cpp	/^initCaptureProc initCapture;$/;"	v	typeref:typename:initCaptureProc
initCaptureProc	Astro8-Emulator/escapi.h	/^typedef int (*initCaptureProc)(unsigned int deviceno, struct SimpleCapParams *aParams);$/;"	t	typeref:typename:int (*)(unsigned int deviceno,struct SimpleCapParams * aParams)
instructions	ResourceGenerator/Program.cs	/^    static string[] instructions = { "NOP", "AIN", "BIN", "CIN", "LDIA", "LDIB", "RDEXP", "WREXP/;"	f	class:Program	file:
invert	Astro8-Emulator/color.hpp	/^        colorful<T>& invert()$/;"	f	class:dye::colorful	typeref:typename:colorful<T> &
invert	Astro8-Emulator/color.hpp	/^        item<T>& invert()$/;"	f	class:dye::item	typeref:typename:item<T> &
invert	Astro8-Emulator/color.hpp	/^    colorful<T> invert(colorful<T> col)$/;"	f	namespace:dye	typeref:typename:colorful<T>
invert	Astro8-Emulator/color.hpp	/^    static int invert(int c)$/;"	f	namespace:hue	typeref:typename:int
isCaptureDone	Astro8-Emulator/escapi.cpp	/^isCaptureDoneProc isCaptureDone;$/;"	v	typeref:typename:isCaptureDoneProc
isCaptureDoneProc	Astro8-Emulator/escapi.h	/^typedef int (*isCaptureDoneProc)(unsigned int deviceno);$/;"	t	typeref:typename:int (*)(unsigned int deviceno)
is_good	Astro8-Emulator/color.hpp	/^    static inline bool is_good(int c)$/;"	f	namespace:hue	typeref:typename:bool
item	Astro8-Emulator/color.hpp	/^        item(T t) : thing(std::move(t)), color(hue::get()) {}$/;"	f	class:dye::item
item	Astro8-Emulator/color.hpp	/^        item(T t, int a) : thing(std::move(t)), color(hue::itoc(a)) {}$/;"	f	class:dye::item
item	Astro8-Emulator/color.hpp	/^        item(T t, int a, int b) : thing(std::move(t)), color(hue::itoc(a, b)) {}$/;"	f	class:dye::item
item	Astro8-Emulator/color.hpp	/^        item(T t, std::string a) : thing(std::move(t)), color(hue::stoc(a)) {}$/;"	f	class:dye::item
item	Astro8-Emulator/color.hpp	/^        item(T t, std::string a, std::string b) : thing(std::move(t)), color(hue::stoc(a, b)) {}$/;"	f	class:dye::item
item	Astro8-Emulator/color.hpp	/^    class item$/;"	c	namespace:dye
itoc	Astro8-Emulator/color.hpp	/^    static inline int itoc(int a, int b)$/;"	f	namespace:hue	typeref:typename:int
itoc	Astro8-Emulator/color.hpp	/^    static inline int itoc(int c)$/;"	f	namespace:hue	typeref:typename:int
jmp	example_armstrong_programs/pong.armstrong.asm	/^jmp$/;"	l
jmp	example_armstrong_programs/stack.arm.asm	/^jmp$/;"	l
jmpc	example_armstrong_programs/pong.armstrong.asm	/^jmpc$/;"	l
jmpz	example_armstrong_programs/pong.armstrong.asm	/^jmpz$/;"	l
ldain	example_armstrong_programs/pong.armstrong.asm	/^ldain$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 0$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 1$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 108$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 11$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 168$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 17$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 2$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 31$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 35$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 54$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 65$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 71$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 72$/;"	l
ldia	example_armstrong_programs/pong.armstrong.asm	/^ldia 9$/;"	l
ldib	example_armstrong_programs/pong.armstrong.asm	/^ldib 0$/;"	l
ldib	example_armstrong_programs/pong.armstrong.asm	/^ldib 1$/;"	l
ldib	example_armstrong_programs/pong.armstrong.asm	/^ldib 10$/;"	l
ldib	example_armstrong_programs/pong.armstrong.asm	/^ldib 107$/;"	l
ldib	example_armstrong_programs/pong.armstrong.asm	/^ldib 168$/;"	l
ldib	example_armstrong_programs/pong.armstrong.asm	/^ldib 18$/;"	l
ldib	example_armstrong_programs/pong.armstrong.asm	/^ldib 2$/;"	l
ldib	example_armstrong_programs/pong.armstrong.asm	/^ldib 39$/;"	l
ldib	example_armstrong_programs/pong.armstrong.asm	/^ldib 5$/;"	l
ldib	example_armstrong_programs/pong.armstrong.asm	/^ldib 6$/;"	l
ldib	example_armstrong_programs/pong.armstrong.asm	/^ldib 98$/;"	l
ldlge	example_armstrong_programs/pong.armstrong.asm	/^ldlge$/;"	l
ldw	example_armstrong_programs/pong.armstrong.asm	/^ldw$/;"	l
light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua(std::ostream& os) { set_text("la");         return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua(T t) { return R<T> { S<T>(t, "la") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_aqua(std::ostream& os) { set("la", "a");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_aqua(T t) { return R<T> { S<T>(t, "la", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_black(std::ostream& os) { set("la", "k");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_black(T t) { return R<T> { S<T>(t, "la", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_blue(std::ostream& os) { set("la", "b");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_blue(T t) { return R<T> { S<T>(t, "la", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_bright_white(std::ostream& os) { set("la", "bw"); return /;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_bright_white(T t) { return R<T> { S<T>(t, "la", "bw"/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_green(std::ostream& os) { set("la", "g");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_green(T t) { return R<T> { S<T>(t, "la", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_grey(std::ostream& os) { set("la", "e");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_grey(T t) { return R<T> { S<T>(t, "la", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_light_aqua(std::ostream& os) { set("la", "la"); return os/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_light_aqua(T t) { return R<T> { S<T>(t, "la", "la") /;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_light_blue(std::ostream& os) { set("la", "lb"); return os/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_light_blue(T t) { return R<T> { S<T>(t, "la", "lb") /;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_light_green(std::ostream& os) { set("la", "lg"); return o/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_light_green(T t) { return R<T> { S<T>(t, "la", "lg")/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_light_purple(std::ostream& os) { set("la", "lp"); return /;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_light_purple(T t) { return R<T> { S<T>(t, "la", "lp"/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_light_red(std::ostream& os) { set("la", "lr"); return os;/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_light_red(T t) { return R<T> { S<T>(t, "la", "lr") }/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_light_yellow(std::ostream& os) { set("la", "ly"); return /;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_light_yellow(T t) { return R<T> { S<T>(t, "la", "ly"/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_purple(std::ostream& os) { set("la", "p");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_purple(T t) { return R<T> { S<T>(t, "la", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_red(std::ostream& os) { set("la", "r");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_red(T t) { return R<T> { S<T>(t, "la", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_white(std::ostream& os) { set("la", "w");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_white(T t) { return R<T> { S<T>(t, "la", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_aqua_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& light_aqua_on_yellow(std::ostream& os) { set("la", "y");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_aqua_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_aqua_on_yellow(T t) { return R<T> { S<T>(t, "la", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue(std::ostream& os) { set_text("lb");         return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue(T t) { return R<T> { S<T>(t, "lb") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_aqua(std::ostream& os) { set("lb", "a");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_aqua(T t) { return R<T> { S<T>(t, "lb", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_black(std::ostream& os) { set("lb", "k");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_black(T t) { return R<T> { S<T>(t, "lb", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_blue(std::ostream& os) { set("lb", "b");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_blue(T t) { return R<T> { S<T>(t, "lb", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_bright_white(std::ostream& os) { set("lb", "bw"); return /;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_bright_white(T t) { return R<T> { S<T>(t, "lb", "bw"/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_green(std::ostream& os) { set("lb", "g");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_green(T t) { return R<T> { S<T>(t, "lb", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_grey(std::ostream& os) { set("lb", "e");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_grey(T t) { return R<T> { S<T>(t, "lb", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_light_aqua(std::ostream& os) { set("lb", "la"); return os/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_light_aqua(T t) { return R<T> { S<T>(t, "lb", "la") /;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_light_blue(std::ostream& os) { set("lb", "lb"); return os/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_light_blue(T t) { return R<T> { S<T>(t, "lb", "lb") /;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_light_green(std::ostream& os) { set("lb", "lg"); return o/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_light_green(T t) { return R<T> { S<T>(t, "lb", "lg")/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_light_purple(std::ostream& os) { set("lb", "lp"); return /;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_light_purple(T t) { return R<T> { S<T>(t, "lb", "lp"/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_light_red(std::ostream& os) { set("lb", "lr"); return os;/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_light_red(T t) { return R<T> { S<T>(t, "lb", "lr") }/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_light_yellow(std::ostream& os) { set("lb", "ly"); return /;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_light_yellow(T t) { return R<T> { S<T>(t, "lb", "ly"/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_purple(std::ostream& os) { set("lb", "p");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_purple(T t) { return R<T> { S<T>(t, "lb", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_red(std::ostream& os) { set("lb", "r");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_red(T t) { return R<T> { S<T>(t, "lb", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_white(std::ostream& os) { set("lb", "w");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_white(T t) { return R<T> { S<T>(t, "lb", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_blue_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& light_blue_on_yellow(std::ostream& os) { set("lb", "y");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_blue_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_blue_on_yellow(T t) { return R<T> { S<T>(t, "lb", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green(std::ostream& os) { set_text("lg");         return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green(T t) { return R<T> { S<T>(t, "lg") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_aqua(std::ostream& os) { set("lg", "a");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_aqua(T t) { return R<T> { S<T>(t, "lg", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_black(std::ostream& os) { set("lg", "k");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_black(T t) { return R<T> { S<T>(t, "lg", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_blue(std::ostream& os) { set("lg", "b");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_blue(T t) { return R<T> { S<T>(t, "lg", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_bright_white(std::ostream& os) { set("lg", "bw"); return/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_bright_white(T t) { return R<T> { S<T>(t, "lg", "bw/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_green(std::ostream& os) { set("lg", "g");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_green(T t) { return R<T> { S<T>(t, "lg", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_grey(std::ostream& os) { set("lg", "e");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_grey(T t) { return R<T> { S<T>(t, "lg", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_light_aqua(std::ostream& os) { set("lg", "la"); return o/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_light_aqua(T t) { return R<T> { S<T>(t, "lg", "la")/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_light_blue(std::ostream& os) { set("lg", "lb"); return o/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_light_blue(T t) { return R<T> { S<T>(t, "lg", "lb")/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_light_green(std::ostream& os) { set("lg", "lg"); return /;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_light_green(T t) { return R<T> { S<T>(t, "lg", "lg"/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_light_purple(std::ostream& os) { set("lg", "lp"); return/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_light_purple(T t) { return R<T> { S<T>(t, "lg", "lp/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_light_red(std::ostream& os) { set("lg", "lr"); return os/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_light_red(T t) { return R<T> { S<T>(t, "lg", "lr") /;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_light_yellow(std::ostream& os) { set("lg", "ly"); return/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_light_yellow(T t) { return R<T> { S<T>(t, "lg", "ly/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_purple(std::ostream& os) { set("lg", "p");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_purple(T t) { return R<T> { S<T>(t, "lg", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_red(std::ostream& os) { set("lg", "r");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_red(T t) { return R<T> { S<T>(t, "lg", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_white(std::ostream& os) { set("lg", "w");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_white(T t) { return R<T> { S<T>(t, "lg", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_green_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& light_green_on_yellow(std::ostream& os) { set("lg", "y");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_green_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_green_on_yellow(T t) { return R<T> { S<T>(t, "lg", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple(std::ostream& os) { set_text("lp");         return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple(T t) { return R<T> { S<T>(t, "lp") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_aqua(std::ostream& os) { set("lp", "a");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_aqua(T t) { return R<T> { S<T>(t, "lp", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_black(std::ostream& os) { set("lp", "k");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_black(T t) { return R<T> { S<T>(t, "lp", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_blue(std::ostream& os) { set("lp", "b");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_blue(T t) { return R<T> { S<T>(t, "lp", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_bright_white(std::ostream& os) { set("lp", "bw"); retur/;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_bright_white(T t) { return R<T> { S<T>(t, "lp", "b/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_green(std::ostream& os) { set("lp", "g");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_green(T t) { return R<T> { S<T>(t, "lp", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_grey(std::ostream& os) { set("lp", "e");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_grey(T t) { return R<T> { S<T>(t, "lp", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_light_aqua(std::ostream& os) { set("lp", "la"); return /;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_light_aqua(T t) { return R<T> { S<T>(t, "lp", "la"/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_light_blue(std::ostream& os) { set("lp", "lb"); return /;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_light_blue(T t) { return R<T> { S<T>(t, "lp", "lb"/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_light_green(std::ostream& os) { set("lp", "lg"); return/;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_light_green(T t) { return R<T> { S<T>(t, "lp", "lg/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_light_purple(std::ostream& os) { set("lp", "lp"); retur/;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_light_purple(T t) { return R<T> { S<T>(t, "lp", "l/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_light_red(std::ostream& os) { set("lp", "lr"); return o/;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_light_red(T t) { return R<T> { S<T>(t, "lp", "lr")/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_light_yellow(std::ostream& os) { set("lp", "ly"); retur/;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_light_yellow(T t) { return R<T> { S<T>(t, "lp", "l/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_purple(std::ostream& os) { set("lp", "p");  return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_purple(T t) { return R<T> { S<T>(t, "lp", "p") }; /;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_red(std::ostream& os) { set("lp", "r");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_red(T t) { return R<T> { S<T>(t, "lp", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_white(std::ostream& os) { set("lp", "w");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_white(T t) { return R<T> { S<T>(t, "lp", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_purple_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& light_purple_on_yellow(std::ostream& os) { set("lp", "y");  return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
light_purple_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_purple_on_yellow(T t) { return R<T> { S<T>(t, "lp", "y") }; /;"	f	namespace:dye	typeref:typename:R<T>
light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red(std::ostream& os) { set_text("lr");         return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red(T t) { return R<T> { S<T>(t, "lr") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_aqua(std::ostream& os) { set("lr", "a");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_aqua(T t) { return R<T> { S<T>(t, "lr", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_black(std::ostream& os) { set("lr", "k");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_black(T t) { return R<T> { S<T>(t, "lr", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_blue(std::ostream& os) { set("lr", "b");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_blue(T t) { return R<T> { S<T>(t, "lr", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_bright_white(std::ostream& os) { set("lr", "bw"); return o/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_bright_white(T t) { return R<T> { S<T>(t, "lr", "bw")/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_green(std::ostream& os) { set("lr", "g");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_green(T t) { return R<T> { S<T>(t, "lr", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_grey(std::ostream& os) { set("lr", "e");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_grey(T t) { return R<T> { S<T>(t, "lr", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_light_aqua(std::ostream& os) { set("lr", "la"); return os;/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_light_aqua(T t) { return R<T> { S<T>(t, "lr", "la") }/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_light_blue(std::ostream& os) { set("lr", "lb"); return os;/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_light_blue(T t) { return R<T> { S<T>(t, "lr", "lb") }/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_light_green(std::ostream& os) { set("lr", "lg"); return os/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_light_green(T t) { return R<T> { S<T>(t, "lr", "lg") /;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_light_purple(std::ostream& os) { set("lr", "lp"); return o/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_light_purple(T t) { return R<T> { S<T>(t, "lr", "lp")/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_light_red(std::ostream& os) { set("lr", "lr"); return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_light_red(T t) { return R<T> { S<T>(t, "lr", "lr") };/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_light_yellow(std::ostream& os) { set("lr", "ly"); return o/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_light_yellow(T t) { return R<T> { S<T>(t, "lr", "ly")/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_purple(std::ostream& os) { set("lr", "p");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_purple(T t) { return R<T> { S<T>(t, "lr", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_red(std::ostream& os) { set("lr", "r");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_red(T t) { return R<T> { S<T>(t, "lr", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_white(std::ostream& os) { set("lr", "w");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_white(T t) { return R<T> { S<T>(t, "lr", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_red_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& light_red_on_yellow(std::ostream& os) { set("lr", "y");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_red_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_red_on_yellow(T t) { return R<T> { S<T>(t, "lr", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow(std::ostream& os) { set_text("ly");         return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow(T t) { return R<T> { S<T>(t, "ly") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_aqua(std::ostream& os) { set("ly", "a");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_aqua(T t) { return R<T> { S<T>(t, "ly", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_black(std::ostream& os) { set("ly", "k");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_black(T t) { return R<T> { S<T>(t, "ly", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_blue(std::ostream& os) { set("ly", "b");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_blue(T t) { return R<T> { S<T>(t, "ly", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_bright_white(std::ostream& os) { set("ly", "bw"); retur/;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_bright_white(T t) { return R<T> { S<T>(t, "ly", "b/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_green(std::ostream& os) { set("ly", "g");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_green(T t) { return R<T> { S<T>(t, "ly", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_grey(std::ostream& os) { set("ly", "e");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_grey(T t) { return R<T> { S<T>(t, "ly", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_light_aqua(std::ostream& os) { set("ly", "la"); return /;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_light_aqua(T t) { return R<T> { S<T>(t, "ly", "la"/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_light_blue(std::ostream& os) { set("ly", "lb"); return /;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_light_blue(T t) { return R<T> { S<T>(t, "ly", "lb"/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_light_green(std::ostream& os) { set("ly", "lg"); return/;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_light_green(T t) { return R<T> { S<T>(t, "ly", "lg/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_light_purple(std::ostream& os) { set("ly", "lp"); retur/;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_light_purple(T t) { return R<T> { S<T>(t, "ly", "l/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_light_red(std::ostream& os) { set("ly", "lr"); return o/;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_light_red(T t) { return R<T> { S<T>(t, "ly", "lr")/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_light_yellow(std::ostream& os) { set("ly", "ly"); retur/;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_light_yellow(T t) { return R<T> { S<T>(t, "ly", "l/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_purple(std::ostream& os) { set("ly", "p");  return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_purple(T t) { return R<T> { S<T>(t, "ly", "p") }; /;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_red(std::ostream& os) { set("ly", "r");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_red(T t) { return R<T> { S<T>(t, "ly", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_white(std::ostream& os) { set("ly", "w");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_white(T t) { return R<T> { S<T>(t, "ly", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
light_yellow_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& light_yellow_on_yellow(std::ostream& os) { set("ly", "y");  return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
light_yellow_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> light_yellow_on_yellow(T t) { return R<T> { S<T>(t, "ly", "y") }; /;"	f	namespace:dye	typeref:typename:R<T>
longDivision	Astro8-Emulator/strops.cpp	/^std::string longDivision(const std::string& number, uint32_t divisor)$/;"	f	typeref:typename:std::string
ltrim	Astro8-Emulator/strops.cpp	/^void ltrim(std::string& s)$/;"	f	typeref:typename:void
mADSR	Astro8-Emulator/VSSynth/generators/PolyphonicInstrument.h	/^            ADSREnvelope mADSR;$/;"	m	class:VSSynth::Generators::PolyphonicInstrument	typeref:typename:ADSREnvelope
mADSR	Astro8-Emulator/VSSynth/utils/Envelope.h	/^        ADSREnvelope mADSR;$/;"	m	class:VSSynth::Envelope	typeref:typename:ADSREnvelope
mAmplitude	Astro8-Emulator/VSSynth/SoundGenerator.h	/^        double mAmplitude;$/;"	m	class:VSSynth::SoundGenerator	typeref:typename:double
mAmplitude	Astro8-Emulator/VSSynth/utils/Envelope.h	/^        double mAmplitude;$/;"	m	class:VSSynth::Envelope	typeref:typename:double
mCurTime	Astro8-Emulator/VSSynth/generators/Sequencer.h	/^            double mCurTime;$/;"	m	class:VSSynth::Generators::Sequencer	typeref:typename:double
mCurrentCurve	Astro8-Emulator/VSSynth/utils/Envelope.h	/^        } mCurrentCurve;$/;"	m	class:VSSynth::Envelope	typeref:enum:VSSynth::Envelope::Curves
mCurrentNote	Astro8-Emulator/VSSynth/generators/MonophonicInstrument.h	/^            double mCurrentNote;$/;"	m	class:VSSynth::Generators::MonophonicInstrument	typeref:typename:double
mDeviceID	Astro8-Emulator/VSSynth/Synthesizer.h	/^        SDL_AudioDeviceID mDeviceID;$/;"	m	class:VSSynth::Synthesizer	typeref:typename:SDL_AudioDeviceID
mEnvLock	Astro8-Emulator/VSSynth/generators/PolyphonicInstrument.h	/^            std::mutex mEnvLock;$/;"	m	class:VSSynth::Generators::PolyphonicInstrument	typeref:typename:std::mutex
mEnvelope	Astro8-Emulator/VSSynth/generators/MonophonicInstrument.h	/^            Envelope mEnvelope;$/;"	m	class:VSSynth::Generators::MonophonicInstrument	typeref:typename:Envelope
mEnvelopes	Astro8-Emulator/VSSynth/generators/PolyphonicInstrument.h	/^            std::vector<std::pair<double, Envelope>> mEnvelopes;$/;"	m	class:VSSynth::Generators::PolyphonicInstrument	typeref:typename:std::vector<std::pair<double,Envelope>>
mEventIt	Astro8-Emulator/VSSynth/generators/Sequencer.h	/^            std::vector<std::pair<NoteEvent, double>>::iterator mEventIt;$/;"	m	class:VSSynth::Generators::Sequencer	typeref:typename:std::vector<std::pair<NoteEvent,double>>::iterator
mEvents	Astro8-Emulator/VSSynth/generators/Sequencer.h	/^            std::vector<std::pair<NoteEvent, double>> mEvents;$/;"	m	class:VSSynth::Generators::Sequencer	typeref:typename:std::vector<std::pair<NoteEvent,double>>
mHeight	Astro8-Emulator/escapi.h	/^	int mHeight;$/;"	m	struct:SimpleCapParams	typeref:typename:int
mHold	Astro8-Emulator/VSSynth/utils/Envelope.h	/^        bool mHold;$/;"	m	class:VSSynth::Envelope	typeref:typename:bool
mInstrument	Astro8-Emulator/VSSynth/generators/Sequencer.h	/^            Instrument *mInstrument;$/;"	m	class:VSSynth::Generators::Sequencer	typeref:typename:Instrument *
mLoop	Astro8-Emulator/VSSynth/generators/Sequencer.h	/^            bool mLoop;$/;"	m	class:VSSynth::Generators::Sequencer	typeref:typename:bool
mNoteLock	Astro8-Emulator/VSSynth/generators/Tone.h	/^            std::mutex mNoteLock;$/;"	m	class:VSSynth::Generators::Tone	typeref:typename:std::mutex
mNotes	Astro8-Emulator/VSSynth/generators/Tone.h	/^            std::vector<double> mNotes;$/;"	m	class:VSSynth::Generators::Tone	typeref:typename:std::vector<double>
mNumChannels	Astro8-Emulator/VSSynth/middleware/WAVWriter.h	/^            unsigned int mNumChannels;$/;"	m	class:VSSynth::Middleware::WAVWriter	typeref:typename:unsigned int
mNumFrames	Astro8-Emulator/VSSynth/Synthesizer.h	/^        unsigned int mNumFrames;$/;"	m	class:VSSynth::Synthesizer	typeref:typename:unsigned int
mNumWritten	Astro8-Emulator/VSSynth/middleware/WAVWriter.h	/^            unsigned long int mNumWritten;$/;"	m	class:VSSynth::Middleware::WAVWriter	typeref:typename:unsigned long int
mPrevSample	Astro8-Emulator/VSSynth/generators/MonophonicInstrument.h	/^            double mPrevSample;$/;"	m	class:VSSynth::Generators::MonophonicInstrument	typeref:typename:double
mPrevSample	Astro8-Emulator/VSSynth/generators/PolyphonicInstrument.h	/^            double mPrevSample;$/;"	m	class:VSSynth::Generators::PolyphonicInstrument	typeref:typename:double
mSamplingRate	Astro8-Emulator/VSSynth/Synthesizer.h	/^        unsigned int mSamplingRate;$/;"	m	class:VSSynth::Synthesizer	typeref:typename:unsigned int
mSamplingRate	Astro8-Emulator/VSSynth/middleware/WAVWriter.h	/^            unsigned long int mSamplingRate;$/;"	m	class:VSSynth::Middleware::WAVWriter	typeref:typename:unsigned long int
mStartTime	Astro8-Emulator/VSSynth/generators/Sequencer.h	/^            double mStartTime;$/;"	m	class:VSSynth::Generators::Sequencer	typeref:typename:double
mSynthData	Astro8-Emulator/VSSynth/Synthesizer.h	/^        SynthData mSynthData;$/;"	m	class:VSSynth::Synthesizer	typeref:typename:SynthData
mTargetBuf	Astro8-Emulator/escapi.h	/^	int * mTargetBuf;$/;"	m	struct:SimpleCapParams	typeref:typename:int *
mTime	Astro8-Emulator/VSSynth/Synthesizer.h	/^        double mTime;$/;"	m	class:VSSynth::Synthesizer	typeref:typename:double
mWAVFile	Astro8-Emulator/VSSynth/middleware/WAVWriter.h	/^            std::ofstream mWAVFile;$/;"	m	class:VSSynth::Middleware::WAVWriter	typeref:typename:std::ofstream
mWave	Astro8-Emulator/VSSynth/generators/Instrument.h	/^            std::function<double(double, double)> mWave;$/;"	m	class:VSSynth::Generators::Instrument	typeref:typename:std::function<double (double,double)>
mWave	Astro8-Emulator/VSSynth/generators/Tone.h	/^            std::function<double(double, double)> mWave;$/;"	m	class:VSSynth::Generators::Tone	typeref:typename:std::function<double (double,double)>
mWidth	Astro8-Emulator/escapi.h	/^	int mWidth;$/;"	m	struct:SimpleCapParams	typeref:typename:int
magentaBGColor	Astro8-Emulator/colorprint.h	/^static const std::string magentaBGColor = "\\x1B[45m";$/;"	v	typeref:typename:const std::string
magentaFGColor	Astro8-Emulator/colorprint.h	/^static const std::string magentaFGColor = "\\x1B[35m";$/;"	v	typeref:typename:const std::string
main.cpp.i	Astro8-Emulator/linux-build/Makefile	/^main.cpp.i:$/;"	t
main.cpp.o	Astro8-Emulator/linux-build/Makefile	/^main.cpp.o:$/;"	t
main.cpp.s	Astro8-Emulator/linux-build/Makefile	/^main.cpp.s:$/;"	t
main.i	Astro8-Emulator/linux-build/Makefile	/^main.i: main.cpp.i$/;"	t
main.o	Astro8-Emulator/linux-build/Makefile	/^main.o: main.cpp.o$/;"	t
main.s	Astro8-Emulator/linux-build/Makefile	/^main.s: main.cpp.s$/;"	t
microinstructionData	ResourceGenerator/Program.cs	/^    static string[] microinstructionData = new string[2048];$/;"	f	class:Program	file:
middleware	Astro8-Emulator/VSSynth/Synthesizer.h	/^        std::vector<SynthMiddleware *> middleware;$/;"	m	struct:VSSynth::SynthData	typeref:typename:std::vector<SynthMiddleware * >
mult	example_armstrong_programs/pong.armstrong.asm	/^mult$/;"	l
multiplyHexByInteger	Astro8-Emulator/strops.cpp	/^std::string multiplyHexByInteger(const std::string& hexNumber, int multiplier)$/;"	f	typeref:typename:std::string
note	Astro8-Emulator/VSSynth/generators/Sequencer.h	/^                double note;$/;"	m	struct:VSSynth::Generators::Sequencer::NoteEvent	typeref:typename:double
on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& on_aqua(std::ostream& os) { set_background("a");    return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_aqua(T t) { return R<T> { S<T>(t, "k", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& on_black(std::ostream& os) { set_background("k");    return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_black(T t) { return R<T> { S<T>(t, "k", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& on_blue(std::ostream& os) { set_background("b");    return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_blue(T t) { return R<T> { S<T>(t, "k", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& on_bright_white(std::ostream& os) { set_background("bw");   return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_bright_white(T t) { return R<T> { S<T>(t, "k", "bw") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& on_green(std::ostream& os) { set_background("g");    return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_green(T t) { return R<T> { S<T>(t, "k", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& on_grey(std::ostream& os) { set_background("e");    return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_grey(T t) { return R<T> { S<T>(t, "k", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& on_light_aqua(std::ostream& os) { set_background("la");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_light_aqua(T t) { return R<T> { S<T>(t, "k", "la") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& on_light_blue(std::ostream& os) { set_background("lb");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_light_blue(T t) { return R<T> { S<T>(t, "k", "lb") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& on_light_green(std::ostream& os) { set_background("lg");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_light_green(T t) { return R<T> { S<T>(t, "k", "lg") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& on_light_purple(std::ostream& os) { set_background("lp");   return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_light_purple(T t) { return R<T> { S<T>(t, "k", "lp") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& on_light_red(std::ostream& os) { set_background("lr");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_light_red(T t) { return R<T> { S<T>(t, "k", "lr") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& on_light_yellow(std::ostream& os) { set_background("ly");   return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_light_yellow(T t) { return R<T> { S<T>(t, "k", "ly") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& on_purple(std::ostream& os) { set_background("p");    return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_purple(T t) { return R<T> { S<T>(t, "k", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& on_red(std::ostream& os) { set_background("r");    return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_red(T t) { return R<T> { S<T>(t, "k", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& on_white(std::ostream& os) { set_background("w");    return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_white(T t) { return R<T> { S<T>(t, "k", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& on_yellow(std::ostream& os) { set_background("y");    return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> on_yellow(T t) { return R<T> { S<T>(t, "k", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
operator +	Astro8-Emulator/color.hpp	/^    colorful<T> operator+(colorful<T> lhs, colorful<T> rhs)$/;"	f	namespace:dye	typeref:typename:colorful<T>
operator +	Astro8-Emulator/color.hpp	/^    colorful<T> operator+(colorful<T> lhs, std::string rhs)$/;"	f	namespace:dye	typeref:typename:colorful<T>
operator +	Astro8-Emulator/color.hpp	/^    colorful<T> operator+(const std::string& lhs, colorful<T> rhs)$/;"	f	namespace:dye	typeref:typename:colorful<T>
operator +=	Astro8-Emulator/color.hpp	/^        colorful<T>& operator+=(T t)$/;"	f	class:dye::colorful	typeref:typename:colorful<T> &
operator +=	Astro8-Emulator/color.hpp	/^        colorful<T>& operator+=(colorful<T>&& rhs)$/;"	f	class:dye::colorful	typeref:typename:colorful<T> &
operator +=	Astro8-Emulator/color.hpp	/^        colorful<T>& operator+=(const colorful<T>& rhs)$/;"	f	class:dye::colorful	typeref:typename:colorful<T> &
operator <<	Astro8-Emulator/color.hpp	/^    std::ostream& operator<<(std::ostream& os, const colorful<T>& colorful)$/;"	f	namespace:dye	typeref:typename:std::ostream &
operator <<	Astro8-Emulator/color.hpp	/^    std::ostream& operator<<(std::ostream& os, const item<T>& it)$/;"	f	namespace:dye	typeref:typename:std::ostream &
parseCode	ResourceGenerator/Program.cs	/^    static List<string> parseCode(string input)$/;"	m	class:Program	file:
pause	Astro8-Emulator/audio.h	/^			bool pause;$/;"	m	struct:Hyper_BandCHIP::SampleAudio::__anon5f040b730108	typeref:typename:bool
playback_rate	Astro8-Emulator/audio.h	/^			double playback_rate;$/;"	m	struct:Hyper_BandCHIP::SampleAudio::__anon5f040b730108	typeref:typename:double
pos	Astro8-Emulator/audio.h	/^			int pos;$/;"	m	struct:Hyper_BandCHIP::SampleAudio::__anon5f040b730108	typeref:typename:int
preinstall	Astro8-Emulator/linux-build/Makefile	/^preinstall: all$/;"	t
preinstall/fast	Astro8-Emulator/linux-build/Makefile	/^preinstall\/fast:$/;"	t
processing	Astro8-Emulator/audio.h	/^		bool processing;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:bool
processing	Astro8-Emulator/audio.h	/^		bool processing;$/;"	m	class:Hyper_BandCHIP::SampleAudio	typeref:typename:bool
programName	Astro8-Emulator/CMakeLists.txt	/^SET(programName astro8)$/;"	v
purple	Astro8-Emulator/color.hpp	/^    static std::ostream& purple(std::ostream& os) { set_text("p");          return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple(T t) { return R<T> { S<T>(t, "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
purple_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_aqua(std::ostream& os) { set("p", "a");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_aqua(T t) { return R<T> { S<T>(t, "p", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
purple_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_black(std::ostream& os) { set("p", "k");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_black(T t) { return R<T> { S<T>(t, "p", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
purple_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_blue(std::ostream& os) { set("p", "b");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_blue(T t) { return R<T> { S<T>(t, "p", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
purple_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_bright_white(std::ostream& os) { set("p", "bw");  return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_bright_white(T t) { return R<T> { S<T>(t, "p", "bw") }; /;"	f	namespace:dye	typeref:typename:R<T>
purple_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_green(std::ostream& os) { set("p", "g");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_green(T t) { return R<T> { S<T>(t, "p", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
purple_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_grey(std::ostream& os) { set("p", "e");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_grey(T t) { return R<T> { S<T>(t, "p", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
purple_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_light_aqua(std::ostream& os) { set("p", "la");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_light_aqua(T t) { return R<T> { S<T>(t, "p", "la") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
purple_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_light_blue(std::ostream& os) { set("p", "lb");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_light_blue(T t) { return R<T> { S<T>(t, "p", "lb") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
purple_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_light_green(std::ostream& os) { set("p", "lg");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_light_green(T t) { return R<T> { S<T>(t, "p", "lg") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
purple_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_light_purple(std::ostream& os) { set("p", "lp");  return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_light_purple(T t) { return R<T> { S<T>(t, "p", "lp") }; /;"	f	namespace:dye	typeref:typename:R<T>
purple_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_light_red(std::ostream& os) { set("p", "lr");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_light_red(T t) { return R<T> { S<T>(t, "p", "lr") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
purple_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_light_yellow(std::ostream& os) { set("p", "ly");  return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_light_yellow(T t) { return R<T> { S<T>(t, "p", "ly") }; /;"	f	namespace:dye	typeref:typename:R<T>
purple_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_purple(std::ostream& os) { set("p", "p");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_purple(T t) { return R<T> { S<T>(t, "p", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
purple_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_red(std::ostream& os) { set("p", "r");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_red(T t) { return R<T> { S<T>(t, "p", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
purple_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_white(std::ostream& os) { set("p", "w");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_white(T t) { return R<T> { S<T>(t, "p", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
purple_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& purple_on_yellow(std::ostream& os) { set("p", "y");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
purple_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> purple_on_yellow(T t) { return R<T> { S<T>(t, "p", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
push_back	Astro8-Emulator/color.hpp	/^        void push_back(T t)$/;"	f	class:dye::colorful	typeref:typename:void
push_front	Astro8-Emulator/color.hpp	/^        void push_front(T t)$/;"	f	class:dye::colorful	typeref:typename:void
rebuild_cache	Astro8-Emulator/linux-build/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache/fast	Astro8-Emulator/linux-build/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
red	Astro8-Emulator/color.hpp	/^    static std::ostream& red(std::ostream& os) { set_text("r");          return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red(T t) { return R<T> { S<T>(t, "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
redBGColor	Astro8-Emulator/colorprint.h	/^static const std::string redBGColor = "\\x1B[41m";$/;"	v	typeref:typename:const std::string
redFGColor	Astro8-Emulator/colorprint.h	/^static const std::string redFGColor = "\\x1B[31m";$/;"	v	typeref:typename:const std::string
red_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_aqua(std::ostream& os) { set("r", "a");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_aqua(T t) { return R<T> { S<T>(t, "r", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_black(std::ostream& os) { set("r", "k");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_black(T t) { return R<T> { S<T>(t, "r", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_blue(std::ostream& os) { set("r", "b");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_blue(T t) { return R<T> { S<T>(t, "r", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_bright_white(std::ostream& os) { set("r", "bw");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_bright_white(T t) { return R<T> { S<T>(t, "r", "bw") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_green(std::ostream& os) { set("r", "g");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_green(T t) { return R<T> { S<T>(t, "r", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_grey(std::ostream& os) { set("r", "e");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_grey(T t) { return R<T> { S<T>(t, "r", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_light_aqua(std::ostream& os) { set("r", "la");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_light_aqua(T t) { return R<T> { S<T>(t, "r", "la") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_light_blue(std::ostream& os) { set("r", "lb");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_light_blue(T t) { return R<T> { S<T>(t, "r", "lb") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_light_green(std::ostream& os) { set("r", "lg");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_light_green(T t) { return R<T> { S<T>(t, "r", "lg") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_light_purple(std::ostream& os) { set("r", "lp");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_light_purple(T t) { return R<T> { S<T>(t, "r", "lp") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_light_red(std::ostream& os) { set("r", "lr");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_light_red(T t) { return R<T> { S<T>(t, "r", "lr") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_light_yellow(std::ostream& os) { set("r", "ly");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_light_yellow(T t) { return R<T> { S<T>(t, "r", "ly") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_purple(std::ostream& os) { set("r", "p");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_purple(T t) { return R<T> { S<T>(t, "r", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_red(std::ostream& os) { set("r", "r");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_red(T t) { return R<T> { S<T>(t, "r", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_white(std::ostream& os) { set("r", "w");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_white(T t) { return R<T> { S<T>(t, "r", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
red_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& red_on_yellow(std::ostream& os) { set("r", "y");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
red_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> red_on_yellow(T t) { return R<T> { S<T>(t, "r", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
releaseTime	Astro8-Emulator/VSSynth/utils/Envelope.h	/^        double attackTime, decayTime, releaseTime; \/\/ Time-lengths$/;"	m	struct:VSSynth::ADSREnvelope	typeref:typename:double
release_time	Astro8-Emulator/audio.h	/^		double release_time;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:double
reset	Astro8-Emulator/color.hpp	/^    static std::ostream& reset(std::ostream& os) { reset();                return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
reset	Astro8-Emulator/color.hpp	/^    static void reset()$/;"	f	namespace:hue	typeref:typename:void
resetColor	Astro8-Emulator/colorprint.h	/^static const std::string resetColor = "\\033[0m";$/;"	v	typeref:typename:const std::string
round	Astro8-Emulator/strops.cpp	/^double round(float value, int decimal_places)$/;"	f	typeref:typename:double
roundFloat	Astro8-Emulator/strops.cpp	/^inline static const std::string roundFloat(const double input, const int decimal_places)$/;"	f	typeref:typename:const std::string	file:
rtrim	Astro8-Emulator/strops.cpp	/^void rtrim(std::string& s)$/;"	f	typeref:typename:void
sampleDeltaTime	Astro8-Emulator/VSSynth/Synthesizer.h	/^        double sampleDeltaTime;$/;"	m	struct:VSSynth::SynthData	typeref:typename:double
set	Astro8-Emulator/color.hpp	/^    static void set(int a, int b)$/;"	f	namespace:hue	typeref:typename:void
set	Astro8-Emulator/color.hpp	/^    static void set(int c)$/;"	f	namespace:hue	typeref:typename:void
set	Astro8-Emulator/color.hpp	/^    static void set(std::string a, std::string b)$/;"	f	namespace:hue	typeref:typename:void
setCaptureProperty	Astro8-Emulator/escapi.cpp	/^setCapturePropertyProc setCaptureProperty;$/;"	v	typeref:typename:setCapturePropertyProc
setCapturePropertyProc	Astro8-Emulator/escapi.h	/^typedef int (*setCapturePropertyProc)(unsigned int deviceno, int prop, float value, int autoval)/;"	t	typeref:typename:int (*)(unsigned int deviceno,int prop,float value,int autoval)
set_background	Astro8-Emulator/color.hpp	/^    static void set_background(std::string b)$/;"	f	namespace:hue	typeref:typename:void
set_text	Astro8-Emulator/color.hpp	/^    static void set_text(std::string a)$/;"	f	namespace:hue	typeref:typename:void
setupESCAPI	Astro8-Emulator/escapi.cpp	/^int setupESCAPI()$/;"	f	typeref:typename:int
shiftHexNumber	Astro8-Emulator/strops.cpp	/^std::string shiftHexNumber(const std::string& hexNumber, int digits)$/;"	f	typeref:typename:std::string
soundGenerators	Astro8-Emulator/VSSynth/Synthesizer.h	/^        std::vector<SoundGenerator *> soundGenerators;$/;"	m	struct:VSSynth::SynthData	typeref:typename:std::vector<SoundGenerator * >
split	Astro8-Emulator/processing.h	/^std::vector<std::string> split(std::string str, std::string token)$/;"	f	typeref:typename:std::vector<std::string>
splitByComparator	Astro8-Emulator/processing.h	/^static std::vector<std::string> splitByComparator(std::string str)$/;"	f	typeref:typename:std::vector<std::string>
staout	example_armstrong_programs/pong.armstrong.asm	/^staout$/;"	l
start_level	Astro8-Emulator/audio.h	/^		double start_level;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:double
stlge	example_armstrong_programs/pong.armstrong.asm	/^stlge$/;"	l
stoc	Astro8-Emulator/color.hpp	/^    static int stoc(std::string a)$/;"	f	namespace:hue	typeref:typename:int
stoc	Astro8-Emulator/color.hpp	/^    static int stoc(std::string a, std::string b)$/;"	f	namespace:hue	typeref:typename:int
stringToHex	Astro8-Emulator/strops.cpp	/^void stringToHex(char* input, char* output, int len)$/;"	f	typeref:typename:void
strops.cpp.i	Astro8-Emulator/linux-build/Makefile	/^strops.cpp.i:$/;"	t
strops.cpp.o	Astro8-Emulator/linux-build/Makefile	/^strops.cpp.o:$/;"	t
strops.cpp.s	Astro8-Emulator/linux-build/Makefile	/^strops.cpp.s:$/;"	t
strops.i	Astro8-Emulator/linux-build/Makefile	/^strops.i: strops.cpp.i$/;"	t
strops.o	Astro8-Emulator/linux-build/Makefile	/^strops.o: strops.cpp.o$/;"	t
strops.s	Astro8-Emulator/linux-build/Makefile	/^strops.s: strops.cpp.s$/;"	t
strops_h	Astro8-Emulator/strops.h	/^#define strops_h$/;"	d
sub	example_armstrong_programs/pong.armstrong.asm	/^sub$/;"	l
subOneFromHex	Astro8-Emulator/strops.cpp	/^void subOneFromHex(std::string& hexNumber, int index)$/;"	f	typeref:typename:void
sustain	Astro8-Emulator/VSSynth/utils/Envelope.h	/^        double attack, sustain;                    \/\/ Amplitudes$/;"	m	struct:VSSynth::ADSREnvelope	typeref:typename:double
sustain_level	Astro8-Emulator/audio.h	/^		double sustain_level;$/;"	m	class:Hyper_BandCHIP::Audio	typeref:typename:double
sustainable	Astro8-Emulator/VSSynth/utils/Envelope.h	/^        bool sustainable;$/;"	m	struct:VSSynth::ADSREnvelope	typeref:typename:bool
swp	example_armstrong_programs/pong.armstrong.asm	/^swp$/;"	l
thing	Astro8-Emulator/color.hpp	/^        T thing;$/;"	m	class:dye::item	typeref:typename:T
time	Astro8-Emulator/VSSynth/Synthesizer.h	/^        double *time;$/;"	m	struct:VSSynth::SynthData	typeref:typename:double *
time	Astro8-Emulator/audio.h	/^			double time;$/;"	m	struct:Hyper_BandCHIP::SampleAudio::__anon5f040b730108	typeref:typename:double
toHexChar	Astro8-Emulator/strops.cpp	/^char toHexChar(int value)$/;"	f	typeref:typename:char
trim	Astro8-Emulator/processing.h	/^static inline std::string trim(std::string s)$/;"	f	typeref:typename:std::string
truncateMetricNum	Astro8-Emulator/strops.cpp	/^std::string truncateMetricNum(double x)$/;"	f	typeref:typename:std::string
vanilla	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> vanilla(T t) { return R<T> { S<T>(t) }; }$/;"	f	namespace:dye	typeref:typename:R<T>
vbuf	example_armstrong_programs/pong.armstrong.asm	/^vbuf$/;"	l
voice_list	Astro8-Emulator/audio.h	/^		} voice_list[voices];$/;"	m	class:Hyper_BandCHIP::SampleAudio	typeref:struct:Hyper_BandCHIP::SampleAudio::__anon5f040b730108[]
volume	Astro8-Emulator/audio.h	/^			double volume;$/;"	m	struct:Hyper_BandCHIP::SampleAudio::__anon5f040b730108	typeref:typename:double
white	Astro8-Emulator/color.hpp	/^    static std::ostream& white(std::ostream& os) { set_text("w");          return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white(T t) { return R<T> { S<T>(t, "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
whiteBGColor	Astro8-Emulator/colorprint.h	/^static const std::string whiteBGColor = "\\x1B[47m";$/;"	v	typeref:typename:const std::string
whiteFGColor	Astro8-Emulator/colorprint.h	/^static const std::string whiteFGColor = "\\x1B[37m";$/;"	v	typeref:typename:const std::string
white_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_aqua(std::ostream& os) { set("w", "a");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_aqua(T t) { return R<T> { S<T>(t, "w", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_black(std::ostream& os) { set("w", "k");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_black(T t) { return R<T> { S<T>(t, "w", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_blue(std::ostream& os) { set("w", "b");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_blue(T t) { return R<T> { S<T>(t, "w", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_bright_white(std::ostream& os) { set("w", "bw");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_bright_white(T t) { return R<T> { S<T>(t, "w", "bw") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_green(std::ostream& os) { set("w", "g");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_green(T t) { return R<T> { S<T>(t, "w", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_grey(std::ostream& os) { set("w", "e");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_grey(T t) { return R<T> { S<T>(t, "w", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_light_aqua(std::ostream& os) { set("w", "la");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_light_aqua(T t) { return R<T> { S<T>(t, "w", "la") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_light_blue(std::ostream& os) { set("w", "lb");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_light_blue(T t) { return R<T> { S<T>(t, "w", "lb") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_light_green(std::ostream& os) { set("w", "lg");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_light_green(T t) { return R<T> { S<T>(t, "w", "lg") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_light_purple(std::ostream& os) { set("w", "lp");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_light_purple(T t) { return R<T> { S<T>(t, "w", "lp") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_light_red(std::ostream& os) { set("w", "lr");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_light_red(T t) { return R<T> { S<T>(t, "w", "lr") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_light_yellow(std::ostream& os) { set("w", "ly");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_light_yellow(T t) { return R<T> { S<T>(t, "w", "ly") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_purple(std::ostream& os) { set("w", "p");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_purple(T t) { return R<T> { S<T>(t, "w", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_red(std::ostream& os) { set("w", "r");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_red(T t) { return R<T> { S<T>(t, "w", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_white(std::ostream& os) { set("w", "w");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_white(T t) { return R<T> { S<T>(t, "w", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
white_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& white_on_yellow(std::ostream& os) { set("w", "y");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
white_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> white_on_yellow(T t) { return R<T> { S<T>(t, "w", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow(std::ostream& os) { set_text("y");          return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow(T t) { return R<T> { S<T>(t, "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellowBGColor	Astro8-Emulator/colorprint.h	/^static const std::string yellowBGColor = "\\x1B[43m";$/;"	v	typeref:typename:const std::string
yellowFGColor	Astro8-Emulator/colorprint.h	/^static const std::string yellowFGColor = "\\x1B[33m";$/;"	v	typeref:typename:const std::string
yellow_on_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_aqua(std::ostream& os) { set("y", "a");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_aqua(T t) { return R<T> { S<T>(t, "y", "a") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_black	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_black(std::ostream& os) { set("y", "k");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_black	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_black(T t) { return R<T> { S<T>(t, "y", "k") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_blue(std::ostream& os) { set("y", "b");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_blue(T t) { return R<T> { S<T>(t, "y", "b") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_bright_white	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_bright_white(std::ostream& os) { set("y", "bw");  return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_bright_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_bright_white(T t) { return R<T> { S<T>(t, "y", "bw") }; /;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_green	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_green(std::ostream& os) { set("y", "g");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_green(T t) { return R<T> { S<T>(t, "y", "g") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_grey	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_grey(std::ostream& os) { set("y", "e");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_grey	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_grey(T t) { return R<T> { S<T>(t, "y", "e") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_light_aqua	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_light_aqua(std::ostream& os) { set("y", "la");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_light_aqua	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_light_aqua(T t) { return R<T> { S<T>(t, "y", "la") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_light_blue	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_light_blue(std::ostream& os) { set("y", "lb");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_light_blue	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_light_blue(T t) { return R<T> { S<T>(t, "y", "lb") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_light_green	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_light_green(std::ostream& os) { set("y", "lg");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_light_green	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_light_green(T t) { return R<T> { S<T>(t, "y", "lg") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_light_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_light_purple(std::ostream& os) { set("y", "lp");  return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_light_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_light_purple(T t) { return R<T> { S<T>(t, "y", "lp") }; /;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_light_red	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_light_red(std::ostream& os) { set("y", "lr");  return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_light_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_light_red(T t) { return R<T> { S<T>(t, "y", "lr") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_light_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_light_yellow(std::ostream& os) { set("y", "ly");  return os; /;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_light_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_light_yellow(T t) { return R<T> { S<T>(t, "y", "ly") }; /;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_purple	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_purple(std::ostream& os) { set("y", "p");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_purple	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_purple(T t) { return R<T> { S<T>(t, "y", "p") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_red	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_red(std::ostream& os) { set("y", "r");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_red	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_red(T t) { return R<T> { S<T>(t, "y", "r") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_white	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_white(std::ostream& os) { set("y", "w");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_white	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_white(T t) { return R<T> { S<T>(t, "y", "w") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
yellow_on_yellow	Astro8-Emulator/color.hpp	/^    static std::ostream& yellow_on_yellow(std::ostream& os) { set("y", "y");   return os; }$/;"	f	namespace:hue	typeref:typename:std::ostream &
yellow_on_yellow	Astro8-Emulator/color.hpp	/^    template<typename T> R<T> yellow_on_yellow(T t) { return R<T> { S<T>(t, "y", "y") }; }$/;"	f	namespace:dye	typeref:typename:R<T>
~SampleAudio	Astro8-Emulator/audio.h	/^		~SampleAudio()$/;"	f	class:Hyper_BandCHIP::SampleAudio
SYS_PAUSE	Astro8-Emulator/main.cpp	/^	#define SYS_PAUSE /;"	d	file:
SYS_PAUSE	Astro8-Emulator/main.cpp	/^	#define SYS_PAUSE /;"	d	file:
DEV_MODE	Astro8-Emulator/main.cpp	/^#define DEV_MODE /;"	d	file:
VERSION	Astro8-Emulator/main.cpp	/^std::string VERSION = "Astro-8 VERSION: v3.4.2-alpha";$/;"	v	typeref:typename:std::string
compileOnly	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
assembleOnly	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
runAstroExecutable	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
verbose	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
superVerbose	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
usingWebcam	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
imageOnlyMode	Astro8-Emulator/main.cpp	/^bool compileOnly, assembleOnly, runAstroExecutable, verbose, superVerbose, usingWebcam, imageOnl/;"	v	typeref:typename:bool
usingKeyboard	Astro8-Emulator/main.cpp	/^bool usingKeyboard = true, usingMouse = true, performanceMode = true, usingFileSystem = true;$/;"	v	typeref:typename:bool
usingMouse	Astro8-Emulator/main.cpp	/^bool usingKeyboard = true, usingMouse = true, performanceMode = true, usingFileSystem = true;$/;"	v	typeref:typename:bool
performanceMode	Astro8-Emulator/main.cpp	/^bool usingKeyboard = true, usingMouse = true, performanceMode = true, usingFileSystem = true;$/;"	v	typeref:typename:bool
usingFileSystem	Astro8-Emulator/main.cpp	/^bool usingKeyboard = true, usingMouse = true, performanceMode = true, usingFileSystem = true;$/;"	v	typeref:typename:bool
imageOnlyModeFrames	Astro8-Emulator/main.cpp	/^uint16_t imageOnlyModeFrames = 10;$/;"	v	typeref:typename:uint16_t
imageOnlyModeFrameCount	Astro8-Emulator/main.cpp	/^uint16_t imageOnlyModeFrameCount = 10;$/;"	v	typeref:typename:uint16_t
AReg	Astro8-Emulator/main.cpp	/^uint16_t AReg = 0;$/;"	v	typeref:typename:uint16_t
BReg	Astro8-Emulator/main.cpp	/^uint16_t BReg = 0;$/;"	v	typeref:typename:uint16_t
CReg	Astro8-Emulator/main.cpp	/^uint16_t CReg = 0;$/;"	v	typeref:typename:uint16_t
BankReg	Astro8-Emulator/main.cpp	/^uint8_t BankReg = 0;$/;"	v	typeref:typename:uint8_t
InstructionReg	Astro8-Emulator/main.cpp	/^uint16_t InstructionReg = 0;$/;"	v	typeref:typename:uint16_t
flags	Astro8-Emulator/main.cpp	/^uint8_t flags[2] = {0, 0};$/;"	v	typeref:typename:uint8_t[2]
bus	Astro8-Emulator/main.cpp	/^int bus = 0;$/;"	v	typeref:typename:int
outputReg	Astro8-Emulator/main.cpp	/^uint16_t outputReg = 0;$/;"	v	typeref:typename:uint16_t
memoryIndex	Astro8-Emulator/main.cpp	/^uint16_t memoryIndex = 0;$/;"	v	typeref:typename:uint16_t
programCounter	Astro8-Emulator/main.cpp	/^uint16_t programCounter = 0;$/;"	v	typeref:typename:uint16_t
imgX	Astro8-Emulator/main.cpp	/^uint8_t imgX = 0;$/;"	v	typeref:typename:uint8_t
imgY	Astro8-Emulator/main.cpp	/^uint8_t imgY = 0;$/;"	v	typeref:typename:uint8_t
charPixX	Astro8-Emulator/main.cpp	/^uint8_t charPixX = 0;$/;"	v	typeref:typename:uint8_t
charPixY	Astro8-Emulator/main.cpp	/^uint8_t charPixY = 0;$/;"	v	typeref:typename:uint8_t
characterRamIndex	Astro8-Emulator/main.cpp	/^uint16_t characterRamIndex = 0;$/;"	v	typeref:typename:uint16_t
pixelRamIndex	Astro8-Emulator/main.cpp	/^uint16_t pixelRamIndex = 0;$/;"	v	typeref:typename:uint16_t
AS_VARIABLE_OFFSET	Astro8-Emulator/main.cpp	/^#define AS_VARIABLE_OFFSET /;"	d	file:
VideoBufReg	Astro8-Emulator/main.cpp	/^bool VideoBufReg = false;$/;"	v	typeref:typename:bool
target_cpu_freq	Astro8-Emulator/main.cpp	/^uint32_t target_cpu_freq = 16000000;$/;"	v	typeref:typename:uint32_t
TARGET_RENDER_FPS	Astro8-Emulator/main.cpp	/^#define TARGET_RENDER_FPS /;"	d	file:
memoryBytes	Astro8-Emulator/main.cpp	/^vector<vector<uint16_t>> memoryBytes;$/;"	v	typeref:typename:vector<vector<uint16_t>>
videoBuffer	Astro8-Emulator/main.cpp	/^vector<vector<uint16_t>> videoBuffer;$/;"	v	typeref:typename:vector<vector<uint16_t>>
asciiToSdcii	Astro8-Emulator/main.cpp	/^uint8_t asciiToSdcii[600];$/;"	v	typeref:typename:uint8_t[600]
ascToSdcii	Astro8-Emulator/main.cpp	/^uint8_t ascToSdcii[600];$/;"	v	typeref:typename:uint8_t[600]
sdciiToAscii	Astro8-Emulator/main.cpp	/^uint8_t sdciiToAscii[600];$/;"	v	typeref:typename:uint8_t[600]
projectDirectory	Astro8-Emulator/main.cpp	/^std::string projectDirectory;$/;"	v	typeref:typename:std::string
executableDirectory	Astro8-Emulator/main.cpp	/^std::string executableDirectory;$/;"	v	typeref:typename:std::string
MICROINSTR_SIZE	Astro8-Emulator/main.cpp	/^#define MICROINSTR_SIZE /;"	d	file:
MicroInstruction	Astro8-Emulator/main.cpp	/^using MicroInstruction = uint16_t;$/;"	t	typeref:typename:uint16_t	file:
microinstructionData	Astro8-Emulator/main.cpp	/^MicroInstruction microinstructionData[2048];$/;"	v	typeref:typename:MicroInstruction[2048]
ALUInstruction	Astro8-Emulator/main.cpp	/^enum ALUInstruction : MicroInstruction {$/;"	g	typeref:typename:MicroInstruction	file:
ALU_SU	Astro8-Emulator/main.cpp	/^	ALU_SU = 0b0000000000000001,$/;"	e	enum:ALUInstruction	file:
ALU_MU	Astro8-Emulator/main.cpp	/^	ALU_MU = 0b0000000000000010,$/;"	e	enum:ALUInstruction	file:
ALU_DI	Astro8-Emulator/main.cpp	/^	ALU_DI = 0b0000000000000011,$/;"	e	enum:ALUInstruction	file:
ALU_SL	Astro8-Emulator/main.cpp	/^	ALU_SL = 0b0000000000000100,$/;"	e	enum:ALUInstruction	file:
ALU_SR	Astro8-Emulator/main.cpp	/^	ALU_SR = 0b0000000000000101,$/;"	e	enum:ALUInstruction	file:
ALU_AND	Astro8-Emulator/main.cpp	/^	ALU_AND = 0b0000000000000110,$/;"	e	enum:ALUInstruction	file:
ALU_OR	Astro8-Emulator/main.cpp	/^	ALU_OR = 0b0000000000000111,$/;"	e	enum:ALUInstruction	file:
ALU_NOT	Astro8-Emulator/main.cpp	/^	ALU_NOT = 0b0000000000001000,$/;"	e	enum:ALUInstruction	file:
ALU_MASK	Astro8-Emulator/main.cpp	/^	ALU_MASK = 0b0000000000001111,$/;"	e	enum:ALUInstruction	file:
ReadInstruction	Astro8-Emulator/main.cpp	/^enum ReadInstruction : MicroInstruction {$/;"	g	typeref:typename:MicroInstruction	file:
READ_RA	Astro8-Emulator/main.cpp	/^	READ_RA = 0b0000000000010000,$/;"	e	enum:ReadInstruction	file:
READ_RB	Astro8-Emulator/main.cpp	/^	READ_RB = 0b0000000000100000,$/;"	e	enum:ReadInstruction	file:
READ_RC	Astro8-Emulator/main.cpp	/^	READ_RC = 0b0000000000110000,$/;"	e	enum:ReadInstruction	file:
READ_RM	Astro8-Emulator/main.cpp	/^	READ_RM = 0b0000000001000000,$/;"	e	enum:ReadInstruction	file:
READ_IR	Astro8-Emulator/main.cpp	/^	READ_IR = 0b0000000001010000,$/;"	e	enum:ReadInstruction	file:
READ_CR	Astro8-Emulator/main.cpp	/^	READ_CR = 0b0000000001100000,$/;"	e	enum:ReadInstruction	file:
READ_MASK	Astro8-Emulator/main.cpp	/^	READ_MASK = 0b0000000001110000,$/;"	e	enum:ReadInstruction	file:
WriteInstruction	Astro8-Emulator/main.cpp	/^enum WriteInstruction : MicroInstruction {$/;"	g	typeref:typename:MicroInstruction	file:
WRITE_WA	Astro8-Emulator/main.cpp	/^	WRITE_WA = 0b0000000010000000,$/;"	e	enum:WriteInstruction	file:
WRITE_WB	Astro8-Emulator/main.cpp	/^	WRITE_WB = 0b0000000100000000,$/;"	e	enum:WriteInstruction	file:
WRITE_WC	Astro8-Emulator/main.cpp	/^	WRITE_WC = 0b0000000110000000,$/;"	e	enum:WriteInstruction	file:
WRITE_IW	Astro8-Emulator/main.cpp	/^	WRITE_IW = 0b0000001000000000,$/;"	e	enum:WriteInstruction	file:
WRITE_DW	Astro8-Emulator/main.cpp	/^	WRITE_DW = 0b0000001010000000,$/;"	e	enum:WriteInstruction	file:
WRITE_WM	Astro8-Emulator/main.cpp	/^	WRITE_WM = 0b0000001100000000,$/;"	e	enum:WriteInstruction	file:
WRITE_J	Astro8-Emulator/main.cpp	/^	WRITE_J = 0b0000001110000000,$/;"	e	enum:WriteInstruction	file:
WRITE_AW	Astro8-Emulator/main.cpp	/^	WRITE_AW = 0b0000010000000000,$/;"	e	enum:WriteInstruction	file:
WRITE_BNK	Astro8-Emulator/main.cpp	/^	WRITE_BNK = 0b0000010010000000,$/;"	e	enum:WriteInstruction	file:
WRITE_VBUF	Astro8-Emulator/main.cpp	/^	WRITE_VBUF = 0b0000010100000000,$/;"	e	enum:WriteInstruction	file:
WRITE_MASK	Astro8-Emulator/main.cpp	/^	WRITE_MASK = 0b0000011110000000,$/;"	e	enum:WriteInstruction	file:
StandaloneInstruction	Astro8-Emulator/main.cpp	/^enum StandaloneInstruction : MicroInstruction {$/;"	g	typeref:typename:MicroInstruction	file:
STANDALONE_FL	Astro8-Emulator/main.cpp	/^	STANDALONE_FL = 0b0000100000000000,$/;"	e	enum:StandaloneInstruction	file:
STANDALONE_EI	Astro8-Emulator/main.cpp	/^	STANDALONE_EI = 0b0001000000000000,$/;"	e	enum:StandaloneInstruction	file:
STANDALONE_ST	Astro8-Emulator/main.cpp	/^	STANDALONE_ST = 0b0010000000000000,$/;"	e	enum:StandaloneInstruction	file:
STANDALONE_CE	Astro8-Emulator/main.cpp	/^	STANDALONE_CE = 0b0100000000000000,$/;"	e	enum:StandaloneInstruction	file:
STANDALONE_EO	Astro8-Emulator/main.cpp	/^	STANDALONE_EO = 0b1000000000000000,$/;"	e	enum:StandaloneInstruction	file:
FullInstruction	Astro8-Emulator/main.cpp	/^using FullInstruction = uint16_t;$/;"	t	typeref:typename:uint16_t	file:
AllInstructions	Astro8-Emulator/main.cpp	/^enum AllInstructions : FullInstruction {$/;"	g	typeref:typename:FullInstruction	file:
NOP	Astro8-Emulator/main.cpp	/^	NOP = 0,$/;"	e	enum:AllInstructions	file:
AIN	Astro8-Emulator/main.cpp	/^	AIN = 1,$/;"	e	enum:AllInstructions	file:
BIN	Astro8-Emulator/main.cpp	/^	BIN,$/;"	e	enum:AllInstructions	file:
CIN	Astro8-Emulator/main.cpp	/^	CIN,$/;"	e	enum:AllInstructions	file:
LDIA	Astro8-Emulator/main.cpp	/^	LDIA,$/;"	e	enum:AllInstructions	file:
LDIB	Astro8-Emulator/main.cpp	/^	LDIB,$/;"	e	enum:AllInstructions	file:
STA	Astro8-Emulator/main.cpp	/^	STA,$/;"	e	enum:AllInstructions	file:
ADD	Astro8-Emulator/main.cpp	/^	ADD,$/;"	e	enum:AllInstructions	file:
SUB	Astro8-Emulator/main.cpp	/^	SUB,$/;"	e	enum:AllInstructions	file:
MULT	Astro8-Emulator/main.cpp	/^	MULT,$/;"	e	enum:AllInstructions	file:
DIV	Astro8-Emulator/main.cpp	/^	DIV,$/;"	e	enum:AllInstructions	file:
JMP	Astro8-Emulator/main.cpp	/^	JMP,$/;"	e	enum:AllInstructions	file:
JMPZ	Astro8-Emulator/main.cpp	/^	JMPZ,$/;"	e	enum:AllInstructions	file:
JMPC	Astro8-Emulator/main.cpp	/^	JMPC,$/;"	e	enum:AllInstructions	file:
JREG	Astro8-Emulator/main.cpp	/^	JREG,$/;"	e	enum:AllInstructions	file:
LDAIN	Astro8-Emulator/main.cpp	/^	LDAIN,$/;"	e	enum:AllInstructions	file:
STAOUT	Astro8-Emulator/main.cpp	/^	STAOUT,$/;"	e	enum:AllInstructions	file:
LDLGE	Astro8-Emulator/main.cpp	/^	LDLGE,$/;"	e	enum:AllInstructions	file:
STLGE	Astro8-Emulator/main.cpp	/^	STLGE,$/;"	e	enum:AllInstructions	file:
LDW	Astro8-Emulator/main.cpp	/^	LDW,$/;"	e	enum:AllInstructions	file:
SWP	Astro8-Emulator/main.cpp	/^	SWP,$/;"	e	enum:AllInstructions	file:
SWPC	Astro8-Emulator/main.cpp	/^	SWPC,$/;"	e	enum:AllInstructions	file:
PCR	Astro8-Emulator/main.cpp	/^	PCR,$/;"	e	enum:AllInstructions	file:
BSL	Astro8-Emulator/main.cpp	/^	BSL,$/;"	e	enum:AllInstructions	file:
BSR	Astro8-Emulator/main.cpp	/^	BSR,$/;"	e	enum:AllInstructions	file:
AND	Astro8-Emulator/main.cpp	/^	AND,$/;"	e	enum:AllInstructions	file:
OR	Astro8-Emulator/main.cpp	/^	OR,$/;"	e	enum:AllInstructions	file:
NOT	Astro8-Emulator/main.cpp	/^	NOT,$/;"	e	enum:AllInstructions	file:
BNK	Astro8-Emulator/main.cpp	/^	BNK,$/;"	e	enum:AllInstructions	file:
VBUF	Astro8-Emulator/main.cpp	/^	VBUF,$/;"	e	enum:AllInstructions	file:
BNKC	Astro8-Emulator/main.cpp	/^	BNKC,$/;"	e	enum:AllInstructions	file:
LDWB	Astro8-Emulator/main.cpp	/^	LDWB,$/;"	e	enum:AllInstructions	file:
characterRom	Astro8-Emulator/main.cpp	/^vector<bool> characterRom;$/;"	v	typeref:typename:vector<bool>
r	Astro8-Emulator/main.cpp	/^SDL_Rect r;$/;"	v	typeref:typename:SDL_Rect
gWindow	Astro8-Emulator/main.cpp	/^SDL_Window* gWindow = NULL;$/;"	v	typeref:typename:SDL_Window *
gRenderer	Astro8-Emulator/main.cpp	/^SDL_Renderer* gRenderer = NULL;$/;"	v	typeref:typename:SDL_Renderer *
gScreenSurface	Astro8-Emulator/main.cpp	/^SDL_Surface* gScreenSurface = NULL;$/;"	v	typeref:typename:SDL_Surface *
texture	Astro8-Emulator/main.cpp	/^SDL_Texture* texture;$/;"	v	typeref:typename:SDL_Texture *
pixels	Astro8-Emulator/main.cpp	/^std::vector<unsigned char> pixels(108 * 108 * 4, 0);$/;"	v	typeref:typename:std::vector<unsigned char>
lastFreq	Astro8-Emulator/main.cpp	/^float lastFreq[4] = {440, 440, 440, 440};$/;"	v	typeref:typename:float[4]
isPlaying	Astro8-Emulator/main.cpp	/^bool isPlaying[4] = {false, false, false, false};$/;"	v	typeref:typename:bool[4]
tone	Astro8-Emulator/main.cpp	/^Tone* tone[4];$/;"	v	typeref:typename:Tone * [4]
instructions	Astro8-Emulator/main.cpp	/^vector<std::string> instructions = {"NOP", "AIN", "BIN", "CIN", "LDIA", "LDIB", "STA", "ADD", "S/;"	v	typeref:typename:vector<std::string>
microinstructions	Astro8-Emulator/main.cpp	/^std::string microinstructions[] = {"EO", "CE", "ST", "EI", "FL"};$/;"	v	typeref:typename:std::string[]
writeInstructionSpecialAddress	Astro8-Emulator/main.cpp	/^std::string writeInstructionSpecialAddress[] = {"WA", "WB", "WC", "IW", "DW", "WM", "J", "AW", "/;"	v	typeref:typename:std::string[]
readInstructionSpecialAddress	Astro8-Emulator/main.cpp	/^std::string readInstructionSpecialAddress[] = {"RA", "RB", "RC", "RM", "IR", "CR"};$/;"	v	typeref:typename:std::string[]
aluInstructionSpecialAddress	Astro8-Emulator/main.cpp	/^std::string aluInstructionSpecialAddress[] = {"SU", "MU", "DI", "SL", "SR", "AND", "OR", "NOT"};$/;"	v	typeref:typename:std::string[]
flagtypes	Astro8-Emulator/main.cpp	/^std::string flagtypes[] = {"ZEROFLAG", "CARRYFLAG"};$/;"	v	typeref:typename:std::string[]
instructioncodes	Astro8-Emulator/main.cpp	/^std::string instructioncodes[] = {$/;"	v	typeref:typename:std::string[]
helpDialog	Astro8-Emulator/main.cpp	/^std::string helpDialog = R"V0G0N($/;"	v	typeref:typename:std::string
apply_pixels	Astro8-Emulator/main.cpp	/^void apply_pixels($/;"	f	typeref:typename:void
DisplayTexture	Astro8-Emulator/main.cpp	/^void DisplayTexture(SDL_Renderer* renderer, SDL_Texture* texture)$/;"	f	typeref:typename:void
clear_buffers	Astro8-Emulator/main.cpp	/^void clear_buffers(SDL_Renderer* renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f	typeref:typename:void
set_pixel	Astro8-Emulator/main.cpp	/^void set_pixel($/;"	f	typeref:typename:void
destroy	Astro8-Emulator/main.cpp	/^void destroy(SDL_Renderer* renderer, SDL_Window* window)$/;"	f	typeref:typename:void
clamp	Astro8-Emulator/main.cpp	/^int clamp(int x, int min, int max)$/;"	f	typeref:typename:int
KeyPress	Astro8-Emulator/main.cpp	/^class KeyPress {$/;"	c	file:
keyCode	Astro8-Emulator/main.cpp	/^	uint16_t keyCode;$/;"	m	class:KeyPress	typeref:typename:uint16_t	file:
uses	Astro8-Emulator/main.cpp	/^	int uses = 2;$/;"	m	class:KeyPress	typeref:typename:int	file:
isDown	Astro8-Emulator/main.cpp	/^	bool isDown = true;	 \/\/ Differ between sending down\/up signal$/;"	m	class:KeyPress	typeref:typename:bool	file:
KeyPress	Astro8-Emulator/main.cpp	/^	KeyPress(int key, bool isPressed)$/;"	f	class:KeyPress	file:
operator ==	Astro8-Emulator/main.cpp	/^bool operator==(const KeyPress& k1, const KeyPress& k2)$/;"	f	typeref:typename:bool
operator !=	Astro8-Emulator/main.cpp	/^bool operator!=(const KeyPress& k1, const KeyPress& k2)$/;"	f	typeref:typename:bool
VecToString	Astro8-Emulator/main.cpp	/^std::string VecToString(const vector<std::string>& vec)$/;"	f	typeref:typename:std::string
GenerateCharacterROM	Astro8-Emulator/main.cpp	/^int GenerateCharacterROM()$/;"	f	typeref:typename:int
main	Astro8-Emulator/main.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
__anon5af039410102	Astro8-Emulator/main.cpp	/^		[](double frequency, double time) {$/;"	f	function:main	file:
__anon5af039410202	Astro8-Emulator/main.cpp	/^		[](double frequency, double time) {$/;"	f	function:main	file:
__anon5af039410302	Astro8-Emulator/main.cpp	/^		[](double frequency, double time) {$/;"	f	function:main	file:
__anon5af039410402	Astro8-Emulator/main.cpp	/^		[](double frequency, double time) {$/;"	f	function:main	file:
channelsPlaying	Astro8-Emulator/main.cpp	/^bool channelsPlaying[] = {false, false, false, false};$/;"	v	typeref:typename:bool[]
Update	Astro8-Emulator/main.cpp	/^void Update()$/;"	f	typeref:typename:void
SetMem	Astro8-Emulator/main.cpp	/^void SetMem(uint16_t bank, uint16_t address, uint16_t data)$/;"	f	typeref:typename:void
GetMem	Astro8-Emulator/main.cpp	/^uint16_t GetMem(uint16_t bank, uint16_t address)$/;"	f	typeref:typename:uint16_t
DrawNextPixel	Astro8-Emulator/main.cpp	/^void DrawNextPixel()$/;"	f	typeref:typename:void
Draw	Astro8-Emulator/main.cpp	/^void Draw()$/;"	f	typeref:typename:void
DrawPixel	Astro8-Emulator/main.cpp	/^void DrawPixel(int x, int y, int r, int g, int b)$/;"	f	typeref:typename:void
Save_Frame	Astro8-Emulator/main.cpp	/^void Save_Frame(const ::std::string& name, vector<unsigned char> img_vals)$/;"	f	typeref:typename:void
SimplifiedHertz	Astro8-Emulator/main.cpp	/^std::string SimplifiedHertz(float input)$/;"	f	typeref:typename:std::string
InitGraphics	Astro8-Emulator/main.cpp	/^int InitGraphics(const std::string& windowTitle, int width, int height, int pixelScale)$/;"	f	typeref:typename:int
charToString	Astro8-Emulator/main.cpp	/^std::string charToString(char* a)$/;"	f	typeref:typename:std::string
BitRange	Astro8-Emulator/main.cpp	/^unsigned BitRange(unsigned value, unsigned offset, unsigned n)$/;"	f	typeref:typename:unsigned
explode	Astro8-Emulator/main.cpp	/^vector<std::string> explode(const std::string& str, const char& ch)$/;"	f	typeref:typename:vector<std::string>
parseCode	Astro8-Emulator/main.cpp	/^vector<vector<std::string>> parseCode(const std::string& input)$/;"	f	typeref:typename:vector<vector<std::string>>
ComputeStepInstructions	Astro8-Emulator/main.cpp	/^void ComputeStepInstructions(const std::string& stepContents, char* stepComputedInstruction)$/;"	f	typeref:typename:void
GenerateMicrocode	Astro8-Emulator/main.cpp	/^void GenerateMicrocode()$/;"	f	typeref:typename:void
vars	Astro8-Emulator/main.cpp	/^vector<string> vars;$/;"	v	typeref:typename:vector<string>
labels	Astro8-Emulator/main.cpp	/^vector<string> labels;$/;"	v	typeref:typename:vector<string>
labelLineValues	Astro8-Emulator/main.cpp	/^vector<int> labelLineValues;$/;"	v	typeref:typename:vector<int>
compiledLines	Astro8-Emulator/main.cpp	/^vector<string> compiledLines;$/;"	v	typeref:typename:vector<string>
ConvertNoteIndexToFrequency	Astro8-Emulator/main.cpp	/^uint16_t ConvertNoteIndexToFrequency(uint8_t index)$/;"	f	typeref:typename:uint16_t
ConvertAsciiToSdcii	Astro8-Emulator/main.cpp	/^int ConvertAsciiToSdcii(int asciiCode)$/;"	f	typeref:typename:int
ConvertSdciiToAscii	Astro8-Emulator/main.cpp	/^int ConvertSdciiToAscii(int sdciiCode)$/;"	f	typeref:typename:int
GenerateAsciiSdciiTables	Astro8-Emulator/main.cpp	/^void GenerateAsciiSdciiTables()$/;"	f	typeref:typename:void
DecToHexFilled	Astro8-Emulator/main.cpp	/^string DecToHexFilled(int input, int desiredSize)$/;"	f	typeref:typename:string
BinToHexFilled	Astro8-Emulator/main.cpp	/^string BinToHexFilled(const string& input, int desiredSize)$/;"	f	typeref:typename:string
BinToDec	Astro8-Emulator/main.cpp	/^int BinToDec(const string& input)$/;"	f	typeref:typename:int
DecToBin	Astro8-Emulator/main.cpp	/^string DecToBin(int input)$/;"	f	typeref:typename:string
DecToBinFilled	Astro8-Emulator/main.cpp	/^string DecToBinFilled(int input, int desiredSize)$/;"	f	typeref:typename:string
HexToBin	Astro8-Emulator/main.cpp	/^string HexToBin(const string& s, int desiredSize)$/;"	f	typeref:typename:string
HexToDec	Astro8-Emulator/main.cpp	/^int HexToDec(const string& hex)$/;"	f	typeref:typename:int
IsHex	Astro8-Emulator/main.cpp	/^bool IsHex(const string& in)$/;"	f	typeref:typename:bool
IsBin	Astro8-Emulator/main.cpp	/^bool IsBin(const string& in)$/;"	f	typeref:typename:bool
IsReg	Astro8-Emulator/main.cpp	/^bool IsReg(const string& in)$/;"	f	typeref:typename:bool
IsVar	Astro8-Emulator/main.cpp	/^bool IsVar(const string& in)$/;"	f	typeref:typename:bool
IsLabel	Astro8-Emulator/main.cpp	/^bool IsLabel(const string& in)$/;"	f	typeref:typename:bool
IsPointer	Astro8-Emulator/main.cpp	/^bool IsPointer(const string& in)$/;"	f	typeref:typename:bool
IsDec	Astro8-Emulator/main.cpp	/^bool IsDec(const string& in)$/;"	f	typeref:typename:bool
PutSetOnCurrentLine	Astro8-Emulator/main.cpp	/^void PutSetOnCurrentLine(const string& value)$/;"	f	typeref:typename:void
LoadAddress	Astro8-Emulator/main.cpp	/^void LoadAddress(const string& reg, const string& address)$/;"	f	typeref:typename:void
StoreAddress	Astro8-Emulator/main.cpp	/^void StoreAddress(const string& reg, const string& address)$/;"	f	typeref:typename:void
RegIdToLDI	Astro8-Emulator/main.cpp	/^void RegIdToLDI(const string& in, const string& followingValue)$/;"	f	typeref:typename:void
MoveFromRegToReg	Astro8-Emulator/main.cpp	/^string MoveFromRegToReg(const string& from, const string& destination)$/;"	f	typeref:typename:string
ActualLineNumFromNum	Astro8-Emulator/main.cpp	/^int ActualLineNumFromNum(int x)$/;"	f	typeref:typename:int
GetVariableAddress	Astro8-Emulator/main.cpp	/^int GetVariableAddress(const string& id)$/;"	f	typeref:typename:int
GetVariableNameFromAddress	Astro8-Emulator/main.cpp	/^std::string GetVariableNameFromAddress(int addr)$/;"	f	typeref:typename:std::string
FindLabelLine	Astro8-Emulator/main.cpp	/^int FindLabelLine(const string& labelName, const vector<string>& labels, const vector<int>& labe/;"	f	typeref:typename:int
ParseValue	Astro8-Emulator/main.cpp	/^int ParseValue(const string& input)$/;"	f	typeref:typename:int
LoadPointer	Astro8-Emulator/main.cpp	/^void LoadPointer(const string& str)$/;"	f	typeref:typename:void
StoreIntoPointer	Astro8-Emulator/main.cpp	/^void StoreIntoPointer(const string& str)$/;"	f	typeref:typename:void
CompareValues	Astro8-Emulator/main.cpp	/^void CompareValues(const string& valA, const string& comparer, const string& valB, const vector</;"	f	typeref:typename:void
GetLineNumber	Astro8-Emulator/main.cpp	/^int GetLineNumber()$/;"	f	typeref:typename:int
CompileCode	Astro8-Emulator/main.cpp	/^string CompileCode(const string& inputcode)$/;"	f	typeref:typename:string
